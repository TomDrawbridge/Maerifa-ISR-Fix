// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: Vsy6KB8nrurB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageWrapper from "../../PageWrapper"; // plasmic-import: LxnEHVEe-YQz/component
import { PlasmicHead } from "@plasmicapp/react-web";
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent
import Kicker from "../../Kicker"; // plasmic-import: sRJYTCOVASaN/component
import DropdownMenu2 from "../../DropdownMenu2"; // plasmic-import: dplT5okjZ4rM/component
import BentoBox from "../../BentoBox"; // plasmic-import: DAE3NiFvGT61/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import TextInput from "../../TextInput"; // plasmic-import: gSAGOIgLlV1m/component
import Button from "../../Button"; // plasmic-import: yRQ3u0JIMHGv/component

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: Vsy6KB8nrurB/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: gCCTv5fw8IjC/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: Mur1Z1Uvvct5/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: DNXHdlapq7ED/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: z4d4jzsZYGyL/icon
import ForWhiteBackgroundSvgIcon from "./icons/PlasmicIcon__ForWhiteBackgroundSvg"; // plasmic-import: bQrEUghiiNPA/icon

createPlasmicElementProxy;

export type PlasmicContact__VariantMembers = {};
export type PlasmicContact__VariantsArgs = {};
type VariantPropType = keyof PlasmicContact__VariantsArgs;
export const PlasmicContact__VariantProps = new Array<VariantPropType>();

export type PlasmicContact__ArgsType = {};
type ArgPropType = keyof PlasmicContact__ArgsType;
export const PlasmicContact__ArgProps = new Array<ArgPropType>();

export type PlasmicContact__OverridesType = {
  root?: Flex__<typeof PageWrapper>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  heroWrapper?: Flex__<"header">;
  heroInner?: Flex__<"div">;
  heroContent?: Flex__<"hgroup">;
  h1?: Flex__<"h1">;
  dropdownMenu2?: Flex__<typeof DropdownMenu2>;
  bentoBoxes4?: Flex__<"hgroup">;
  h3?: Flex__<"h3">;
  form?: Flex__<typeof FormWrapper>;
  name?: Flex__<typeof FormItemWrapper>;
  country2?: Flex__<typeof FormItemWrapper>;
  selectBox2?: Flex__<typeof AntdSelect>;
  name2?: Flex__<typeof FormItemWrapper>;
  textInput4?: Flex__<typeof TextInput>;
  email?: Flex__<typeof FormItemWrapper>;
  textInput2?: Flex__<typeof TextInput>;
  country?: Flex__<typeof FormItemWrapper>;
  selectBox?: Flex__<typeof AntdSelect>;
  company?: Flex__<typeof FormItemWrapper>;
  textInput5?: Flex__<typeof TextInput>;
  span?: Flex__<"span">;
  company2?: Flex__<typeof FormItemWrapper>;
  textInput7?: Flex__<typeof TextInput>;
  posiition2?: Flex__<typeof FormItemWrapper>;
  textInput6?: Flex__<typeof TextInput>;
  message?: Flex__<typeof FormItemWrapper>;
  textarea?: Flex__<"textarea">;
  button?: Flex__<typeof Button>;
  radialBg?: Flex__<"div">;
};

export interface DefaultContactProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContact__RenderFunc(props: {
  variants: PlasmicContact__VariantsArgs;
  args: PlasmicContact__ArgsType;
  overrides: PlasmicContact__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "formSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectBox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentLocation",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [24.4539, 54.3773];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const [isTextareaFocusVisible, triggerTextareaFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: true
    }
  );
  const triggers = {
    focusVisible_textarea: isTextareaFocusVisible
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageWrapper
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          bottomLineNavbar={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          children2={
            <div className={classNames(projectcss.all, sty.freeBox___0V5Zd)}>
              <PlasmicHead
                data-plasmic-name={"pageMetadataOverride"}
                data-plasmic-override={overrides.pageMetadataOverride}
                className={classNames(
                  "__wab_instance",
                  sty.pageMetadataOverride
                )}
                image={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/plasmic/maerifa_solutions/images/asset28Png.png"
                    : "/plasmic/maerifa_solutions/images/asset28Png.png"
                }
                title={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                    : "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                }
              />

              <header
                data-plasmic-name={"heroWrapper"}
                data-plasmic-override={overrides.heroWrapper}
                className={classNames(projectcss.all, sty.heroWrapper)}
              >
                <div
                  data-plasmic-name={"heroInner"}
                  data-plasmic-override={overrides.heroInner}
                  className={classNames(projectcss.all, sty.heroInner)}
                >
                  <Stack__
                    as={"hgroup"}
                    data-plasmic-name={"heroContent"}
                    data-plasmic-override={overrides.heroContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.heroContent)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__eZ16
                      )}
                      delay={0}
                    >
                      <Kicker
                        className={classNames(
                          "__wab_instance",
                          sty.kicker__geILw
                        )}
                        color={"dark"}
                        text={"Contact & Locations"}
                      />
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vkO7B)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__gtGmj
                        )}
                        delay={0.1}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"Contact us"}
                        </h1>
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__nP2RS
                          )}
                        >
                          <DropdownMenu2
                            data-plasmic-name={"dropdownMenu2"}
                            data-plasmic-override={overrides.dropdownMenu2}
                            className={classNames(
                              "__wab_instance",
                              sty.dropdownMenu2
                            )}
                          />
                        </FramerMotion>
                      </FramerMotion>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__nErP9
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e4TKs
                          )}
                        >
                          {
                            "Whether you have questions about our server infrastructure solutions, or simply want to learn more, we want to hear from you"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"hgroup"}
                    data-plasmic-name={"bentoBoxes4"}
                    data-plasmic-override={overrides.bentoBoxes4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.bentoBoxes4)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion___2Q8G0
                      )}
                      delay={0.25}
                    >
                      <BentoBox
                        className={classNames(
                          "__wab_instance",
                          sty.bentoBox__gW9Ii
                        )}
                        description={
                          "We're located at 2909 BC13 Tamouh Tower, Abu Dhabi, United Arab Emirates, 130856"
                        }
                        destination={
                          "https://www.google.com/maps/place/Tamouh+Tower+-+Reem+Island/@24.4881434,54.3923227,17z/data=!3m1!4b1!4m6!3m5!1s0x3e5e67d8cc0f2b6f:0xa08c8f9f8ab48f9d!8m2!3d24.4881385!4d54.3948976!16s%2Fg%2F11p3h957ls?entry=ttu"
                        }
                        header={"Headquarters"}
                        slot={
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__oqWy9)}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/maerifa_solutions/images/image3Png.png",
                              fullWidth: 502,
                              fullHeight: 784,
                              aspectRatio: undefined
                            }}
                          />
                        }
                        type={"noHoverButton"}
                      >
                        <Icon29Icon
                          className={classNames(projectcss.all, sty.svg__pdg5R)}
                          role={"img"}
                        />
                      </BentoBox>
                    </FramerMotion>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__usYdw
                      )}
                      delay={0.4}
                    >
                      <BentoBox
                        className={classNames(
                          "__wab_instance",
                          sty.bentoBox__jx9Xp
                        )}
                        description={
                          "For media and press enquiries, you can reach us at admin@maerifasolutions.com"
                        }
                        destination={"mailto:admin@maerifasolutions.com"}
                        header={"Media and press"}
                        slot={
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___2C0Vl)}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/maerifa_solutions/images/image3Png.png",
                              fullWidth: 502,
                              fullHeight: 784,
                              aspectRatio: undefined
                            }}
                          />
                        }
                        type={"noHoverButton"}
                      >
                        <Icon27Icon
                          className={classNames(projectcss.all, sty.svg__djOq)}
                          role={"img"}
                        />
                      </BentoBox>
                    </FramerMotion>
                  </Stack__>
                </div>
              </header>
              <div className={classNames(projectcss.all, sty.freeBox__w3Yq5)}>
                <FramerMotion
                  className={classNames(
                    "__wab_instance",
                    sty.framerMotion__cxCqC
                  )}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cMoNb)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u3MbJ)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__zkt4O)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wtl6K
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i7UI
                          )}
                        >
                          <FramerMotion
                            className={classNames(
                              "__wab_instance",
                              sty.framerMotion__gK76F
                            )}
                          >
                            <Kicker
                              className={classNames(
                                "__wab_instance",
                                sty.kicker__l4NAl
                              )}
                              color={"dark"}
                              text={"Let's Connect"}
                            />
                          </FramerMotion>
                          <FramerMotion
                            className={classNames(
                              "__wab_instance",
                              sty.framerMotion___6Ib7W
                            )}
                            delay={0.1}
                          >
                            <h3
                              data-plasmic-name={"h3"}
                              data-plasmic-override={overrides.h3}
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3
                              )}
                            >
                              {"Contact Maerifa"}
                            </h3>
                          </FramerMotion>
                          <FramerMotion
                            className={classNames(
                              "__wab_instance",
                              sty.framerMotion__rnB
                            )}
                            delay={0.2}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__k6YD7
                              )}
                            >
                              {
                                " If you have any questions or simply wish to chat, please use the form below to get in touch. "
                              }
                            </div>
                          </FramerMotion>
                        </Stack__>
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__iMJD
                          )}
                          delay={0.2}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames("__wab_instance", sty.form),
                              extendedOnValuesChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form", "value"],
                                  FormWrapper_Helpers
                                ),
                              formItems: [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ],
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: "advanced",
                              onFinish: async values => {
                                const $steps = {};

                                $steps["httpPost"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "6aaXEvsxmcgUBGeU5dKe15",
                                          opId: "58862175-7395-4c43-ac64-a845e6e4893f",
                                          userArgs: {
                                            body: [
                                              {
                                                ...$state.form.value,
                                                page: $ctx.pagePath
                                              },
                                              (() => {})()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPost"] != null &&
                                  typeof $steps["httpPost"] === "object" &&
                                  typeof $steps["httpPost"].then === "function"
                                ) {
                                  $steps["httpPost"] = await $steps["httpPost"];
                                }

                                $steps["updateFormSubmitted"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["formSubmitted"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormSubmitted"] != null &&
                                  typeof $steps["updateFormSubmitted"] ===
                                    "object" &&
                                  typeof $steps["updateFormSubmitted"].then ===
                                    "function"
                                ) {
                                  $steps["updateFormSubmitted"] = await $steps[
                                    "updateFormSubmitted"
                                  ];
                                }

                                $steps["runActionOnForm"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "form",
                                        action: "clearFields"
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnForm"] != null &&
                                  typeof $steps["runActionOnForm"] ===
                                    "object" &&
                                  typeof $steps["runActionOnForm"].then ===
                                    "function"
                                ) {
                                  $steps["runActionOnForm"] = await $steps[
                                    "runActionOnForm"
                                  ];
                                }
                              },
                              onIsSubmittingChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form", "isSubmitting"],
                                  FormWrapper_Helpers
                                ),
                              ref: ref => {
                                $refs["form"] = ref;
                              },
                              submitSlot: null,
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form.isSubmitting"
                                }
                              ],
                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form"}
                                data-plasmic-override={overrides.form}
                                {...child$Props}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cpdIg
                                  )}
                                >
                                  <FormItemWrapper
                                    data-plasmic-name={"name"}
                                    data-plasmic-override={overrides.name}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.name
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__trOt
                                        )}
                                      >
                                        {"Name"}
                                      </div>
                                    }
                                    name={"title"}
                                    noLabel={true}
                                    rules={[]}
                                  >
                                    <FormItemWrapper
                                      data-plasmic-name={"country2"}
                                      data-plasmic-override={overrides.country2}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.country2
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bHFbh
                                          )}
                                        >
                                          {"Name"}
                                        </div>
                                      }
                                      name={"title"}
                                      noLabel={true}
                                      rules={[]}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"selectBox2"}
                                        data-plasmic-override={
                                          overrides.selectBox2
                                        }
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.selectBox2
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens
                                        )}
                                        dropdownMatchSelectWidth={true}
                                        onChange={generateStateOnChangeProp(
                                          $state,
                                          ["selectBox2", "value"]
                                        )}
                                        options={(() => {
                                          try {
                                            return [
                                              {
                                                label: "Mr",
                                                value: "Mr"
                                              },
                                              {
                                                label: "Mrs",
                                                value: "Mrs"
                                              },
                                              {
                                                label: "Ms",
                                                value: "Ms"
                                              },
                                              {
                                                label: "Other",
                                                value: "Other"
                                              }
                                            ];
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [
                                                {
                                                  value: "option1",
                                                  label: "Option 1",
                                                  type: "option"
                                                },
                                                {
                                                  value: "option2",
                                                  label: "Option 2",
                                                  type: "option"
                                                }
                                              ];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__o9Dhu
                                            )}
                                          >
                                            {"Title:"}
                                          </div>
                                        }
                                        popupScopeClassName={
                                          sty["selectBox2__popup"]
                                        }
                                        showSearch={true}
                                        value={generateStateValueProp($state, [
                                          "selectBox2",
                                          "value"
                                        ])}
                                      />
                                    </FormItemWrapper>
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    data-plasmic-name={"name2"}
                                    data-plasmic-override={overrides.name2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.name2
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__a9Xdk
                                        )}
                                      >
                                        {"Name"}
                                      </div>
                                    }
                                    name={"name"}
                                    noLabel={true}
                                    rules={[]}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput4"}
                                      data-plasmic-override={
                                        overrides.textInput4
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput4
                                      )}
                                      onChange={(...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput4",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }}
                                      placeholder={"John Smith"}
                                      required={true}
                                      showStartIcon={true}
                                      startIcon={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cAOmy
                                          )}
                                        >
                                          {"Name:"}
                                        </div>
                                      }
                                      type={"text"}
                                      value={
                                        generateStateValueProp($state, [
                                          "textInput4",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </FormItemWrapper>
                                </Stack__>
                                <FormItemWrapper
                                  data-plasmic-name={"email"}
                                  data-plasmic-override={overrides.email}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.email
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__xNuJ9
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"email"}
                                  noLabel={true}
                                  rules={[]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput2"}
                                    data-plasmic-override={overrides.textInput2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput2
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput2",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }}
                                    placeholder={
                                      "johnsmith@maerifasolutions.com"
                                    }
                                    required={true}
                                    showStartIcon={true}
                                    startIcon={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__aeIt1
                                        )}
                                      >
                                        {"Email:"}
                                      </div>
                                    }
                                    type={"email"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textInput2",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"country"}
                                  data-plasmic-override={overrides.country}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.country
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__pNVys
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"countrycode"}
                                  noLabel={true}
                                  rules={[]}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"selectBox"}
                                    data-plasmic-override={overrides.selectBox}
                                    bordered={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.selectBox
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens
                                    )}
                                    dropdownMatchSelectWidth={true}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["selectBox", "value"]
                                    )}
                                    options={(() => {
                                      try {
                                        return [
                                          {
                                            label: "Afghanistan 🇦🇫",
                                            value: "+93"
                                          },
                                          {
                                            label: "Albania 🇦🇱",
                                            value: "+355"
                                          },
                                          {
                                            label: "Algeria 🇩🇿",
                                            value: "+213"
                                          },
                                          {
                                            label: "Andorra 🇦🇩",
                                            value: "+376"
                                          },
                                          { label: "Angola 🇦🇴", value: "+244" },
                                          {
                                            label: "Antigua and Barbuda 🇦🇬",
                                            value: "+1268"
                                          },
                                          {
                                            label: "Argentina 🇦🇷",
                                            value: "+54"
                                          },
                                          {
                                            label: "Armenia 🇦🇲",
                                            value: "+374"
                                          },
                                          {
                                            label: "Australia 🇦🇺",
                                            value: "+61"
                                          },
                                          { label: "Austria 🇦🇹", value: "+43" },
                                          {
                                            label: "Azerbaijan 🇦🇿",
                                            value: "+994"
                                          },
                                          {
                                            label: "Bahamas 🇧🇸",
                                            value: "+1242"
                                          },
                                          {
                                            label: "Bahrain 🇧🇭",
                                            value: "+973"
                                          },
                                          {
                                            label: "Bangladesh 🇧🇩",
                                            value: "+880"
                                          },
                                          {
                                            label: "Barbados 🇧🇧",
                                            value: "+1246"
                                          },
                                          {
                                            label: "Belarus 🇧🇾",
                                            value: "+375"
                                          },
                                          { label: "Belgium 🇧🇪", value: "+32" },
                                          { label: "Belize 🇧🇿", value: "+501" },
                                          { label: "Benin 🇧🇯", value: "+229" },
                                          { label: "Bhutan 🇧🇹", value: "+975" },
                                          {
                                            label: "Bolivia 🇧🇴",
                                            value: "+591"
                                          },
                                          {
                                            label: "Bosnia and Herzegovina 🇧🇦",
                                            value: "+387"
                                          },
                                          {
                                            label: "Botswana 🇧🇼",
                                            value: "+267"
                                          },
                                          { label: "Brazil 🇧🇷", value: "+55" },
                                          { label: "Brunei 🇧🇳", value: "+673" },
                                          {
                                            label: "Bulgaria 🇧🇬",
                                            value: "+359"
                                          },
                                          {
                                            label: "Burkina Faso 🇧🇫",
                                            value: "+226"
                                          },
                                          {
                                            label: "Burundi 🇧🇮",
                                            value: "+257"
                                          },
                                          {
                                            label: "Cabo Verde 🇨🇻",
                                            value: "+238"
                                          },
                                          {
                                            label: "Cambodia 🇰🇭",
                                            value: "+855"
                                          },
                                          {
                                            label: "Cameroon 🇨🇲",
                                            value: "+237"
                                          },
                                          { label: "Canada 🇨🇦", value: "+1" },
                                          {
                                            label:
                                              "Central African Republic 🇨🇫",
                                            value: "+236"
                                          },
                                          { label: "Chad 🇹🇩", value: "+235" },
                                          { label: "Chile 🇨🇱", value: "+56" },
                                          { label: "China 🇨🇳", value: "+86" },
                                          {
                                            label: "Colombia 🇨🇴",
                                            value: "+57"
                                          },
                                          {
                                            label: "Comoros 🇰🇲",
                                            value: "+269"
                                          },
                                          { label: "Congo 🇨🇬", value: "+242" },
                                          {
                                            label: "Costa Rica 🇨🇷",
                                            value: "+506"
                                          },
                                          {
                                            label: "Croatia 🇭🇷",
                                            value: "+385"
                                          },
                                          { label: "Cuba 🇨🇺", value: "+53" },
                                          { label: "Cyprus 🇨🇾", value: "+357" },
                                          {
                                            label: "Czechia 🇨🇿",
                                            value: "+420"
                                          },
                                          { label: "Denmark 🇩🇰", value: "+45" },
                                          {
                                            label: "Djibouti 🇩🇯",
                                            value: "+253"
                                          },
                                          {
                                            label: "Dominica 🇩🇲",
                                            value: "+1767"
                                          },
                                          {
                                            label: "Dominican Republic 🇩🇴",
                                            value: "+1809"
                                          },
                                          {
                                            label: "Ecuador 🇪🇨",
                                            value: "+593"
                                          },
                                          { label: "Egypt 🇪🇬", value: "+20" },
                                          {
                                            label: "El Salvador 🇸🇻",
                                            value: "+503"
                                          },
                                          {
                                            label: "Equatorial Guinea 🇬🇶",
                                            value: "+240"
                                          },
                                          {
                                            label: "Eritrea 🇪🇷",
                                            value: "+291"
                                          },
                                          {
                                            label: "Estonia 🇪🇪",
                                            value: "+372"
                                          },
                                          {
                                            label: "Eswatini 🇸🇿",
                                            value: "+268"
                                          },
                                          {
                                            label: "Ethiopia 🇪🇹",
                                            value: "+251"
                                          },
                                          { label: "Fiji 🇫🇯", value: "+679" },
                                          {
                                            label: "Finland 🇫🇮",
                                            value: "+358"
                                          },
                                          { label: "France 🇫🇷", value: "+33" },
                                          { label: "Gabon 🇬🇦", value: "+241" },
                                          { label: "Gambia 🇬🇲", value: "+220" },
                                          {
                                            label: "Georgia 🇬🇪",
                                            value: "+995"
                                          },
                                          { label: "Germany 🇩🇪", value: "+49" },
                                          { label: "Ghana 🇬🇭", value: "+233" },
                                          { label: "Greece 🇬🇷", value: "+30" },
                                          {
                                            label: "Grenada 🇬🇩",
                                            value: "+1473"
                                          },
                                          {
                                            label: "Guatemala 🇬🇹",
                                            value: "+502"
                                          },
                                          { label: "Guinea 🇬🇳", value: "+224" },
                                          {
                                            label: "Guinea-Bissau 🇬🇼",
                                            value: "+245"
                                          },
                                          { label: "Guyana 🇬🇾", value: "+592" },
                                          { label: "Haiti 🇭🇹", value: "+509" },
                                          {
                                            label: "Honduras 🇭🇳",
                                            value: "+504"
                                          },
                                          { label: "Hungary 🇭🇺", value: "+36" },
                                          {
                                            label: "Iceland 🇮🇸",
                                            value: "+354"
                                          },
                                          { label: "India 🇮🇳", value: "+91" },
                                          {
                                            label: "Indonesia 🇮🇩",
                                            value: "+62"
                                          },
                                          { label: "Iran 🇮🇷", value: "+98" },
                                          { label: "Iraq 🇮🇶", value: "+964" },
                                          {
                                            label: "Ireland 🇮🇪",
                                            value: "+353"
                                          },
                                          { label: "Israel 🇮🇱", value: "+972" },
                                          { label: "Italy 🇮🇹", value: "+39" },
                                          {
                                            label: "Jamaica 🇯🇲",
                                            value: "+1876"
                                          },
                                          { label: "Japan 🇯🇵", value: "+81" },
                                          { label: "Jordan 🇯🇴", value: "+962" },
                                          {
                                            label: "Kazakhstan 🇰🇿",
                                            value: "+7"
                                          },
                                          { label: "Kenya 🇰🇪", value: "+254" },
                                          {
                                            label: "Kiribati 🇰🇮",
                                            value: "+686"
                                          },
                                          { label: "Kuwait 🇰🇼", value: "+965" },
                                          {
                                            label: "Kyrgyzstan 🇰🇬",
                                            value: "+996"
                                          },
                                          { label: "Laos 🇱🇦", value: "+856" },
                                          { label: "Latvia 🇱🇻", value: "+371" },
                                          {
                                            label: "Lebanon 🇱🇧",
                                            value: "+961"
                                          },
                                          {
                                            label: "Lesotho 🇱🇸",
                                            value: "+266"
                                          },
                                          {
                                            label: "Liberia 🇱🇷",
                                            value: "+231"
                                          },
                                          { label: "Libya 🇱🇾", value: "+218" },
                                          {
                                            label: "Liechtenstein 🇱🇮",
                                            value: "+423"
                                          },
                                          {
                                            label: "Lithuania 🇱🇹",
                                            value: "+370"
                                          },
                                          {
                                            label: "Luxembourg 🇱🇺",
                                            value: "+352"
                                          },
                                          {
                                            label: "Madagascar 🇲🇬",
                                            value: "+261"
                                          },
                                          { label: "Malawi 🇲🇼", value: "+265" },
                                          {
                                            label: "Malaysia 🇲🇾",
                                            value: "+60"
                                          },
                                          {
                                            label: "Maldives 🇲🇻",
                                            value: "+960"
                                          },
                                          { label: "Mali 🇲🇱", value: "+223" },
                                          { label: "Malta 🇲🇹", value: "+356" },
                                          {
                                            label: "Marshall Islands 🇲🇭",
                                            value: "+692"
                                          },
                                          {
                                            label: "Mauritania 🇲🇷",
                                            value: "+222"
                                          },
                                          {
                                            label: "Mauritius 🇲🇺",
                                            value: "+230"
                                          },
                                          { label: "Mexico 🇲🇽", value: "+52" },
                                          {
                                            label: "Micronesia 🇫🇲",
                                            value: "+691"
                                          },
                                          {
                                            label: "Moldova 🇲🇩",
                                            value: "+373"
                                          },
                                          { label: "Monaco 🇲🇨", value: "+377" },
                                          {
                                            label: "Mongolia 🇲🇳",
                                            value: "+976"
                                          },
                                          {
                                            label: "Montenegro 🇲🇪",
                                            value: "+382"
                                          },
                                          {
                                            label: "Morocco 🇲🇦",
                                            value: "+212"
                                          },
                                          {
                                            label: "Mozambique 🇲🇿",
                                            value: "+258"
                                          },
                                          { label: "Myanmar 🇲🇲", value: "+95" },
                                          {
                                            label: "Namibia 🇳🇦",
                                            value: "+264"
                                          },
                                          { label: "Nauru 🇳🇷", value: "+674" },
                                          { label: "Nepal 🇳🇵", value: "+977" },
                                          {
                                            label: "Netherlands 🇳🇱",
                                            value: "+31"
                                          },
                                          {
                                            label: "New Zealand 🇳🇿",
                                            value: "+64"
                                          },
                                          {
                                            label: "Nicaragua 🇳🇮",
                                            value: "+505"
                                          },
                                          { label: "Niger 🇳🇪", value: "+227" },
                                          {
                                            label: "Nigeria 🇳🇬",
                                            value: "+234"
                                          },
                                          {
                                            label: "North Korea 🇰🇵",
                                            value: "+850"
                                          },
                                          {
                                            label: "North Macedonia 🇲🇰",
                                            value: "+389"
                                          },
                                          { label: "Norway 🇳🇴", value: "+47" },
                                          { label: "Oman 🇴🇲", value: "+968" },
                                          {
                                            label: "Pakistan 🇵🇰",
                                            value: "+92"
                                          },
                                          { label: "Palau 🇵🇼", value: "+680" },
                                          {
                                            label: "Palestine 🇵🇸",
                                            value: "+970"
                                          },
                                          { label: "Panama 🇵🇦", value: "+507" },
                                          {
                                            label: "Papua New Guinea 🇵🇬",
                                            value: "+675"
                                          },
                                          {
                                            label: "Paraguay 🇵🇾",
                                            value: "+595"
                                          },
                                          { label: "Peru 🇵🇪", value: "+51" },
                                          {
                                            label: "Philippines 🇵🇭",
                                            value: "+63"
                                          },
                                          { label: "Poland 🇵🇱", value: "+48" },
                                          {
                                            label: "Portugal 🇵🇹",
                                            value: "+351"
                                          },
                                          { label: "Qatar 🇶🇦", value: "+974" },
                                          { label: "Romania 🇷🇴", value: "+40" },
                                          { label: "Russia 🇷🇺", value: "+7" },
                                          { label: "Rwanda 🇷🇼", value: "+250" },
                                          {
                                            label: "Saint Kitts and Nevis 🇰🇳",
                                            value: "+1869"
                                          },
                                          {
                                            label: "Saint Lucia 🇱🇨",
                                            value: "+1758"
                                          },
                                          {
                                            label:
                                              "Saint Vincent and the Grenadines 🇻🇨",
                                            value: "+1784"
                                          },
                                          { label: "Samoa 🇼🇸", value: "+685" },
                                          {
                                            label: "San Marino 🇸🇲",
                                            value: "+378"
                                          },
                                          {
                                            label: "Sao Tome and Principe 🇸🇹",
                                            value: "+239"
                                          },
                                          {
                                            label: "Saudi Arabia 🇸🇦",
                                            value: "+966"
                                          },
                                          {
                                            label: "Senegal 🇸🇳",
                                            value: "+221"
                                          },
                                          { label: "Serbia 🇷🇸", value: "+381" },
                                          {
                                            label: "Seychelles 🇸🇨",
                                            value: "+248"
                                          },
                                          {
                                            label: "Sierra Leone 🇸🇱",
                                            value: "+232"
                                          },
                                          {
                                            label: "Singapore 🇸🇬",
                                            value: "+65"
                                          },
                                          {
                                            label: "Slovakia 🇸🇰",
                                            value: "+421"
                                          },
                                          {
                                            label: "Slovenia 🇸🇮",
                                            value: "+386"
                                          },
                                          {
                                            label: "Solomon Islands 🇸🇧",
                                            value: "+677"
                                          },
                                          {
                                            label: "Somalia 🇸🇴",
                                            value: "+252"
                                          },
                                          {
                                            label: "South Africa 🇿🇦",
                                            value: "+27"
                                          },
                                          {
                                            label: "South Korea 🇰🇷",
                                            value: "+82"
                                          },
                                          {
                                            label: "South Sudan 🇸🇸",
                                            value: "+211"
                                          },
                                          { label: "Spain 🇪🇸", value: "+34" },
                                          {
                                            label: "Sri Lanka 🇱🇰",
                                            value: "+94"
                                          },
                                          { label: "Sudan 🇸🇩", value: "+249" },
                                          {
                                            label: "Suriname 🇸🇷",
                                            value: "+597"
                                          },
                                          { label: "Sweden 🇸🇪", value: "+46" },
                                          {
                                            label: "Switzerland 🇨🇭",
                                            value: "+41"
                                          },
                                          { label: "Syria 🇸🇾", value: "+963" },
                                          { label: "Taiwan 🇹🇼", value: "+886" },
                                          {
                                            label: "Tajikistan 🇹🇯",
                                            value: "+992"
                                          },
                                          {
                                            label: "Tanzania 🇹🇿",
                                            value: "+255"
                                          },
                                          {
                                            label: "Thailand 🇹🇭",
                                            value: "+66"
                                          },
                                          {
                                            label: "Timor-Leste 🇹🇱",
                                            value: "+670"
                                          },
                                          { label: "Togo 🇹🇬", value: "+228" },
                                          { label: "Tonga 🇹🇴", value: "+676" },
                                          {
                                            label: "Trinidad and Tobago 🇹🇹",
                                            value: "+1868"
                                          },
                                          {
                                            label: "Tunisia 🇹🇳",
                                            value: "+216"
                                          },
                                          { label: "Turkey 🇹🇷", value: "+90" },
                                          {
                                            label: "Turkmenistan 🇹🇲",
                                            value: "+993"
                                          },
                                          { label: "Tuvalu 🇹🇻", value: "+688" },
                                          { label: "Uganda 🇺🇬", value: "+256" },
                                          {
                                            label: "Ukraine 🇺🇦",
                                            value: "+380"
                                          },
                                          {
                                            label: "United Arab Emirates 🇦🇪",
                                            value: "+971"
                                          },
                                          {
                                            label: "United Kingdom 🇬🇧",
                                            value: "+44"
                                          },
                                          {
                                            label:
                                              "United States of America 🇺🇸",
                                            value: "+1"
                                          },
                                          {
                                            label: "Uruguay 🇺🇾",
                                            value: "+598"
                                          },
                                          {
                                            label: "Uzbekistan 🇺🇿",
                                            value: "+998"
                                          },
                                          {
                                            label: "Vanuatu 🇻🇺",
                                            value: "+678"
                                          },
                                          {
                                            label: "Vatican City 🇻🇦",
                                            value: "+379"
                                          },
                                          {
                                            label: "Venezuela 🇻🇪",
                                            value: "+58"
                                          },
                                          { label: "Vietnam 🇻🇳", value: "+84" },
                                          { label: "Yemen 🇾🇪", value: "+967" },
                                          { label: "Zambia 🇿🇲", value: "+260" },
                                          {
                                            label: "Zimbabwe 🇿🇼",
                                            value: "+263"
                                          }
                                        ];
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1",
                                              type: "option"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2",
                                              type: "option"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ipX8
                                        )}
                                      >
                                        {"Country:"}
                                      </div>
                                    }
                                    popupScopeClassName={
                                      sty["selectBox__popup"]
                                    }
                                    showSearch={true}
                                    value={generateStateValueProp($state, [
                                      "selectBox",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"company"}
                                  data-plasmic-override={overrides.company}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.company
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__zj7JO
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"phone"}
                                  noLabel={true}
                                  rules={[]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput5"}
                                    data-plasmic-override={overrides.textInput5}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput5
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput5",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }}
                                    placeholder={"00-12345678"}
                                    required={false}
                                    showStartIcon={true}
                                    startIcon={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___2Ixro
                                        )}
                                      >
                                        <React.Fragment>
                                          <React.Fragment>
                                            {"Phone:  "}
                                          </React.Fragment>
                                          {
                                            <span
                                              data-plasmic-name={"span"}
                                              data-plasmic-override={
                                                overrides.span
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.span,
                                                projectcss.__wab_text,
                                                projectcss.plasmic_default__inline,
                                                sty.span
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return $state.form.value
                                                      .countrycode;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return " ";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </span>
                                          }
                                          <React.Fragment>{""}</React.Fragment>
                                        </React.Fragment>
                                      </div>
                                    }
                                    type={"tel"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textInput5",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"company2"}
                                  data-plasmic-override={overrides.company2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.company2
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__wMXie
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"company"}
                                  noLabel={true}
                                  rules={[]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput7"}
                                    data-plasmic-override={overrides.textInput7}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput7
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput7",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }}
                                    placeholder={"Maerifa Solutions"}
                                    required={false}
                                    showStartIcon={true}
                                    startIcon={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jqEgp
                                        )}
                                      >
                                        {"Company:"}
                                      </div>
                                    }
                                    type={"text"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textInput7",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"posiition2"}
                                  data-plasmic-override={overrides.posiition2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.posiition2
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__afS4D
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"position"}
                                  noLabel={true}
                                  rules={[]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput6"}
                                    data-plasmic-override={overrides.textInput6}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput6
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput6",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }}
                                    placeholder={`Technical Director, Data Centre Sales, Etc.${undefined}`}
                                    required={false}
                                    showStartIcon={true}
                                    startIcon={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__huiyO
                                        )}
                                      >
                                        {"Position:"}
                                      </div>
                                    }
                                    type={"text"}
                                    value={
                                      generateStateValueProp($state, [
                                        "textInput6",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"message"}
                                  data-plasmic-override={overrides.message}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.message
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___900Y9
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"message"}
                                  noLabel={true}
                                  rules={[]}
                                >
                                  <textarea
                                    data-plasmic-name={"textarea"}
                                    data-plasmic-override={overrides.textarea}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.textarea,
                                      sty.textarea,
                                      {
                                        [sty.textarea___focusVisible]:
                                          triggers.focusVisible_textarea
                                      }
                                    )}
                                    onChange={e => {
                                      generateStateOnChangeProp($state, [
                                        "textarea",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    placeholder={"Your message here..."}
                                    ref={ref => {
                                      $refs["textarea"] = ref;
                                    }}
                                    value={
                                      generateStateValueProp($state, [
                                        "textarea",
                                        "value"
                                      ]) ?? ""
                                    }
                                    data-plasmic-trigger-props={[
                                      triggerTextareaFocusVisibleProps
                                    ]}
                                  />
                                </FormItemWrapper>
                                <Button
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button
                                  )}
                                  endIcon={
                                    <Icon6Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__xvQDz
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  size={"small"}
                                  submitsForm={true}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.form.isSubmitting
                                          ? "Submitting..."
                                          : $state.formSubmitted
                                          ? "Query Sent"
                                          : "Submit Query";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Submit Message";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </Button>
                              </FormWrapper>
                            );
                          })()}
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__p9TJc
                        )}
                        delay={0.3}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__daos2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lHjYc
                            )}
                          />

                          <ForWhiteBackgroundSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qFab
                            )}
                            role={"img"}
                          />
                        </div>
                      </FramerMotion>
                    </div>
                  </div>
                </FramerMotion>
                <div
                  data-plasmic-name={"radialBg"}
                  data-plasmic-override={overrides.radialBg}
                  className={classNames(projectcss.all, sty.radialBg)}
                />
              </div>
            </div>
          }
          className={classNames("__wab_instance", sty.root)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "heroWrapper",
    "heroInner",
    "heroContent",
    "h1",
    "dropdownMenu2",
    "bentoBoxes4",
    "h3",
    "form",
    "name",
    "country2",
    "selectBox2",
    "name2",
    "textInput4",
    "email",
    "textInput2",
    "country",
    "selectBox",
    "company",
    "textInput5",
    "span",
    "company2",
    "textInput7",
    "posiition2",
    "textInput6",
    "message",
    "textarea",
    "button",
    "radialBg"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  heroWrapper: [
    "heroWrapper",
    "heroInner",
    "heroContent",
    "h1",
    "dropdownMenu2",
    "bentoBoxes4"
  ],
  heroInner: ["heroInner", "heroContent", "h1", "dropdownMenu2", "bentoBoxes4"],
  heroContent: ["heroContent", "h1", "dropdownMenu2"],
  h1: ["h1"],
  dropdownMenu2: ["dropdownMenu2"],
  bentoBoxes4: ["bentoBoxes4"],
  h3: ["h3"],
  form: [
    "form",
    "name",
    "country2",
    "selectBox2",
    "name2",
    "textInput4",
    "email",
    "textInput2",
    "country",
    "selectBox",
    "company",
    "textInput5",
    "span",
    "company2",
    "textInput7",
    "posiition2",
    "textInput6",
    "message",
    "textarea",
    "button"
  ],
  name: ["name", "country2", "selectBox2"],
  country2: ["country2", "selectBox2"],
  selectBox2: ["selectBox2"],
  name2: ["name2", "textInput4"],
  textInput4: ["textInput4"],
  email: ["email", "textInput2"],
  textInput2: ["textInput2"],
  country: ["country", "selectBox"],
  selectBox: ["selectBox"],
  company: ["company", "textInput5", "span"],
  textInput5: ["textInput5", "span"],
  span: ["span"],
  company2: ["company2", "textInput7"],
  textInput7: ["textInput7"],
  posiition2: ["posiition2", "textInput6"],
  textInput6: ["textInput6"],
  message: ["message", "textarea"],
  textarea: ["textarea"],
  button: ["button"],
  radialBg: ["radialBg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageWrapper;
  pageMetadataOverride: typeof PlasmicHead;
  heroWrapper: "header";
  heroInner: "div";
  heroContent: "hgroup";
  h1: "h1";
  dropdownMenu2: typeof DropdownMenu2;
  bentoBoxes4: "hgroup";
  h3: "h3";
  form: typeof FormWrapper;
  name: typeof FormItemWrapper;
  country2: typeof FormItemWrapper;
  selectBox2: typeof AntdSelect;
  name2: typeof FormItemWrapper;
  textInput4: typeof TextInput;
  email: typeof FormItemWrapper;
  textInput2: typeof TextInput;
  country: typeof FormItemWrapper;
  selectBox: typeof AntdSelect;
  company: typeof FormItemWrapper;
  textInput5: typeof TextInput;
  span: "span";
  company2: typeof FormItemWrapper;
  textInput7: typeof TextInput;
  posiition2: typeof FormItemWrapper;
  textInput6: typeof TextInput;
  message: typeof FormItemWrapper;
  textarea: "textarea";
  button: typeof Button;
  radialBg: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContact__VariantsArgs;
    args?: PlasmicContact__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContact__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContact__ArgProps,
          internalVariantPropNames: PlasmicContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    heroWrapper: makeNodeComponent("heroWrapper"),
    heroInner: makeNodeComponent("heroInner"),
    heroContent: makeNodeComponent("heroContent"),
    h1: makeNodeComponent("h1"),
    dropdownMenu2: makeNodeComponent("dropdownMenu2"),
    bentoBoxes4: makeNodeComponent("bentoBoxes4"),
    h3: makeNodeComponent("h3"),
    form: makeNodeComponent("form"),
    _name: makeNodeComponent("name"),
    country2: makeNodeComponent("country2"),
    selectBox2: makeNodeComponent("selectBox2"),
    name2: makeNodeComponent("name2"),
    textInput4: makeNodeComponent("textInput4"),
    email: makeNodeComponent("email"),
    textInput2: makeNodeComponent("textInput2"),
    country: makeNodeComponent("country"),
    selectBox: makeNodeComponent("selectBox"),
    company: makeNodeComponent("company"),
    textInput5: makeNodeComponent("textInput5"),
    span: makeNodeComponent("span"),
    company2: makeNodeComponent("company2"),
    textInput7: makeNodeComponent("textInput7"),
    posiition2: makeNodeComponent("posiition2"),
    textInput6: makeNodeComponent("textInput6"),
    message: makeNodeComponent("message"),
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),
    radialBg: makeNodeComponent("radialBg"),

    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
