// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: dplT5okjZ4rM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarItem from "../../NavbarItem"; // plasmic-import: RtMPv5Ty0hfh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicDropdownMenu2.module.css"; // plasmic-import: dplT5okjZ4rM/css

createPlasmicElementProxy;

export type PlasmicDropdownMenu2__VariantMembers = {
  unnamedVariant2: "unnamedVariant2";
  variant: "menu2";
};
export type PlasmicDropdownMenu2__VariantsArgs = {
  unnamedVariant2?: SingleBooleanChoiceArg<"unnamedVariant2">;
  variant?: SingleChoiceArg<"menu2">;
};
type VariantPropType = keyof PlasmicDropdownMenu2__VariantsArgs;
export const PlasmicDropdownMenu2__VariantProps = new Array<VariantPropType>(
  "unnamedVariant2",
  "variant"
);

export type PlasmicDropdownMenu2__ArgsType = {};
type ArgPropType = keyof PlasmicDropdownMenu2__ArgsType;
export const PlasmicDropdownMenu2__ArgProps = new Array<ArgPropType>();

export type PlasmicDropdownMenu2__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultDropdownMenu2Props {
  unnamedVariant2?: SingleBooleanChoiceArg<"unnamedVariant2">;
  variant?: SingleChoiceArg<"menu2">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDropdownMenu2__RenderFunc(props: {
  variants: PlasmicDropdownMenu2__VariantsArgs;
  args: PlasmicDropdownMenu2__ArgsType;
  overrides: PlasmicDropdownMenu2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedVariant2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant2
      },
      {
        path: "variant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variant
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootunnamedVariant2]: hasVariant(
            $state,
            "unnamedVariant2",
            "unnamedVariant2"
          ),
          [sty.rootvariant_menu2]: hasVariant($state, "variant", "menu2")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <NavbarItem
          className={classNames("__wab_instance", sty.navbarItem___0IBHm, {
            [sty.navbarItemvariant_menu2___0IBHmKV6R]: hasVariant(
              $state,
              "variant",
              "menu2"
            )
          })}
        />

        {(hasVariant($state, "variant", "menu2") ? true : false) ? (
          <NavbarItem
            className={classNames("__wab_instance", sty.navbarItem__rtm0F, {
              [sty.navbarItemvariant_menu2__rtm0FkV6R]: hasVariant(
                $state,
                "variant",
                "menu2"
              )
            })}
          />
        ) : null}
        {(hasVariant($state, "variant", "menu2") ? true : false) ? (
          <NavbarItem
            className={classNames("__wab_instance", sty.navbarItem___0ZWpK, {
              [sty.navbarItemvariant_menu2___0ZWpKkV6R]: hasVariant(
                $state,
                "variant",
                "menu2"
              )
            })}
          />
        ) : null}
        <NavbarItem
          className={classNames("__wab_instance", sty.navbarItem__oCwJq)}
        />

        <NavbarItem
          className={classNames("__wab_instance", sty.navbarItem__zb5P)}
        />

        <NavbarItem
          className={classNames("__wab_instance", sty.navbarItem__inSuV)}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdownMenu2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdownMenu2__VariantsArgs;
    args?: PlasmicDropdownMenu2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdownMenu2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDropdownMenu2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdownMenu2__ArgProps,
          internalVariantPropNames: PlasmicDropdownMenu2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdownMenu2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDropdownMenu2";
  } else {
    func.displayName = `PlasmicDropdownMenu2.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdownMenu2 = Object.assign(
  // Top-level PlasmicDropdownMenu2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicDropdownMenu2
    internalVariantProps: PlasmicDropdownMenu2__VariantProps,
    internalArgProps: PlasmicDropdownMenu2__ArgProps
  }
);

export default PlasmicDropdownMenu2;
/* prettier-ignore-end */
