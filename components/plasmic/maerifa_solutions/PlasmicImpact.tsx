// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: 71kaamFMij4T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageWrapper from "../../PageWrapper"; // plasmic-import: LxnEHVEe-YQz/component
import { PlasmicHead } from "@plasmicapp/react-web";
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent
import Kicker from "../../Kicker"; // plasmic-import: sRJYTCOVASaN/component

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "./plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicImpact.module.css"; // plasmic-import: 71kaamFMij4T/css

import EmpowerLogoBlueSvgIcon from "./icons/PlasmicIcon__EmpowerLogoBlueSvg"; // plasmic-import: sr3Ma6wXCiee/icon

createPlasmicElementProxy;

export type PlasmicImpact__VariantMembers = {};
export type PlasmicImpact__VariantsArgs = {};
type VariantPropType = keyof PlasmicImpact__VariantsArgs;
export const PlasmicImpact__VariantProps = new Array<VariantPropType>();

export type PlasmicImpact__ArgsType = {};
type ArgPropType = keyof PlasmicImpact__ArgsType;
export const PlasmicImpact__ArgProps = new Array<ArgPropType>();

export type PlasmicImpact__OverridesType = {
  root?: Flex__<typeof PageWrapper>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  heroWrapper?: Flex__<"header">;
  heroInner?: Flex__<"div">;
  heroContent?: Flex__<"hgroup">;
  kicker?: Flex__<typeof Kicker>;
  h1?: Flex__<"h1">;
  pageContent?: Flex__<"section">;
  svg?: Flex__<"svg">;
};

export interface DefaultImpactProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImpact__RenderFunc(props: {
  variants: PlasmicImpact__VariantsArgs;
  args: PlasmicImpact__ArgsType;
  overrides: PlasmicImpact__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "formSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicImpact.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicImpact.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicImpact.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageWrapper
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          bottomLineNavbar={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          children2={
            <div className={classNames(projectcss.all, sty.freeBox__rpt4)}>
              <PlasmicHead
                data-plasmic-name={"pageMetadataOverride"}
                data-plasmic-override={overrides.pageMetadataOverride}
                className={classNames(
                  "__wab_instance",
                  sty.pageMetadataOverride
                )}
                image={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/plasmic/maerifa_solutions/images/asset28Png.png"
                    : "/plasmic/maerifa_solutions/images/asset28Png.png"
                }
                title={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                    : ``
                }
              />

              <header
                data-plasmic-name={"heroWrapper"}
                data-plasmic-override={overrides.heroWrapper}
                className={classNames(projectcss.all, sty.heroWrapper)}
              >
                <div
                  data-plasmic-name={"heroInner"}
                  data-plasmic-override={overrides.heroInner}
                  className={classNames(projectcss.all, sty.heroInner)}
                >
                  <Stack__
                    as={"hgroup"}
                    data-plasmic-name={"heroContent"}
                    data-plasmic-override={overrides.heroContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.heroContent)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion___6El8I
                      )}
                      delay={0}
                    >
                      <Kicker
                        data-plasmic-name={"kicker"}
                        data-plasmic-override={overrides.kicker}
                        className={classNames("__wab_instance", sty.kicker)}
                        color={"dark"}
                        text={"Our Leadership"}
                      />
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7D5QA
                      )}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__pJtD
                        )}
                        delay={0.1}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"Impact"}
                        </h1>
                      </FramerMotion>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__lpKmD
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m4UFn
                          )}
                        >
                          {
                            "At Maerifa Solutions, we believe in empowering communities. As such, we have pledged to donate a portion of our net profits to organisations creating impact around the world."
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                </div>
              </header>
              <section
                data-plasmic-name={"pageContent"}
                data-plasmic-override={overrides.pageContent}
                className={classNames(projectcss.all, sty.pageContent)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___1G8V)}
                  id={"scroll"}
                >
                  <FramerMotion
                    className={classNames(
                      "__wab_instance",
                      sty.framerMotion__dwUoi
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lJsge)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__uqJo7)}
                        displayHeight={"auto"}
                        displayMaxHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "300px"
                            : "450px"
                        }
                        displayMaxWidth={"100%"}
                        displayMinHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "300px"
                            : "450px"
                        }
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/maerifa_solutions/images/whatsAppImage20240906At112414Jpeg.jpg",
                          fullWidth: 1600,
                          fullHeight: 1066,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bAkIu
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p6YDr
                        )}
                      />
                    </div>
                  </FramerMotion>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__leEfc)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__ycxIa
                      )}
                      delay={0.1}
                    >
                      <EmpowerLogoBlueSvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </FramerMotion>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__l4KXu
                      )}
                      delay={0.2}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eR5Fk
                        )}
                      >
                        {
                          "Since their inception in 2000, EMpower has awarded more than US$50 million in grants to nearly 400 organisations, and has directly impacted the lives of more than 1 million young people."
                        }
                      </div>
                    </FramerMotion>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uQwDs)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__g2B5S)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__k27Da
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iHeCb
                          )}
                        >
                          {
                            "EMpower partners with local organisations in emerging market countries and other change-makers to enable marginalised young people to transform their lives and communities. Youth in EM countries are a large and growing group, often constituting a third or more of their country\u2019s population. This crucial time of transition\u2014the journey from childhood to adulthood\u2014is when youth develop skills and make decisions that will shape the rest of their lives and, by extension, the futures of their families, their communities, their countries and the wider world."
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__ijOr
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qeVa
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__pr1Im)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/whatsAppImage20240906At104548Jpeg.jpg",
                            fullWidth: 1080,
                            fullHeight: 720,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mqfcM
                          )}
                        />
                      </div>
                    </FramerMotion>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kXt1U)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__hUgP
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mgsEe
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__qZ4I)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/whatsAppImage20240906At104638Jpeg.jpg",
                            fullWidth: 1600,
                            fullHeight: 1063,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eAxzz
                          )}
                        />
                      </div>
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__b02Nm)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__wurO8
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hyplY
                          )}
                        >
                          {
                            "They are filled with creativity, energy, intelligence and hope, yet many face challenges and circumstances that stymie their growth and prevent them from achieving even modest life goals. Young people from underserved communities often lack resources, meaningful choices, and opportunities. Their perspectives are seldom sought or their voices heard. Local organisations that work with marginalised young people\u2014and have the knowledge and solutions needed to break cycles of disadvantage\u2014are also underfunded."
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kev7H)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iNq71)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__ms7Rb
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___84NyH
                          )}
                        >
                          {
                            "EMpower believes that by supporting young people during the most pivotal time in their lives, we can help them change their world\u2014and ours. EMpower provides flexible grants to local organisations focused on economic wellbeing, inclusive learning, and safe and healthy lives for marginalised young people. With tailored support, EMpower also fosters their grantee partners' organisational capacity, skills, and sustainability."
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__szced
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Ol0
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nKqr8)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/screenshot20240409At20005PmPng.png",
                            fullWidth: 2562,
                            fullHeight: 1390,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bDCh6
                          )}
                        />
                      </div>
                    </FramerMotion>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j7Bd)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vau27)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sIHuV
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__xmKEz
                          )}
                          delay={0.2}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bew9J
                            )}
                          >
                            {
                              "For example, in Indonesia, EMpower has enabled young women to gain increased life- and job-readiness, and vocational skills, creating a pathway to skilled and formal employment in the hospitality sector in Bali and other islands. In Vietnam, EMpower provides life, employability, and vocational skills training in IT, graphic design, sales and marketing and hospitality to young people, including those living with disabilities and ethnic minorities, in five provinces."
                            }
                          </div>
                        </FramerMotion>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__a3UfO)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tuSif
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__vpEv7
                          )}
                          delay={0.2}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tbz9N
                            )}
                          >
                            {
                              "In India, EMpower has provided marginalised young people\u2014especially young women and girls\u2014with employment pathways that were previously out of their reach. This empowers young women to pursue nontraditional careers, enabling them to become electricians, drivers, and other professions traditionally inaccessible to them."
                            }
                          </div>
                        </FramerMotion>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </section>
            </div>
          }
          className={classNames("__wab_instance", sty.root)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "heroWrapper",
    "heroInner",
    "heroContent",
    "kicker",
    "h1",
    "pageContent",
    "svg"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  heroWrapper: ["heroWrapper", "heroInner", "heroContent", "kicker", "h1"],
  heroInner: ["heroInner", "heroContent", "kicker", "h1"],
  heroContent: ["heroContent", "kicker", "h1"],
  kicker: ["kicker"],
  h1: ["h1"],
  pageContent: ["pageContent", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageWrapper;
  pageMetadataOverride: typeof PlasmicHead;
  heroWrapper: "header";
  heroInner: "div";
  heroContent: "hgroup";
  kicker: typeof Kicker;
  h1: "h1";
  pageContent: "section";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImpact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImpact__VariantsArgs;
    args?: PlasmicImpact__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImpact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImpact__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImpact__ArgProps,
          internalVariantPropNames: PlasmicImpact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImpact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImpact";
  } else {
    func.displayName = `PlasmicImpact.${nodeName}`;
  }
  return func;
}

export const PlasmicImpact = Object.assign(
  // Top-level PlasmicImpact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    heroWrapper: makeNodeComponent("heroWrapper"),
    heroInner: makeNodeComponent("heroInner"),
    heroContent: makeNodeComponent("heroContent"),
    kicker: makeNodeComponent("kicker"),
    h1: makeNodeComponent("h1"),
    pageContent: makeNodeComponent("pageContent"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicImpact
    internalVariantProps: PlasmicImpact__VariantProps,
    internalArgProps: PlasmicImpact__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Impact | Maerifa Solutions |",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicImpact;
/* prettier-ignore-end */
