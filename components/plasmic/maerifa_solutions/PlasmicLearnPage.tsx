// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: 2aSD8p-fn-HK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageWrapper from "../../PageWrapper"; // plasmic-import: LxnEHVEe-YQz/component
import { PlasmicHead } from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent
import Kicker from "../../Kicker"; // plasmic-import: sRJYTCOVASaN/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicLearnPage.module.css"; // plasmic-import: 2aSD8p-fn-HK/css

import __lib_dayjs from "dayjs";

createPlasmicElementProxy;

export type PlasmicLearnPage__VariantMembers = {};
export type PlasmicLearnPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLearnPage__VariantsArgs;
export const PlasmicLearnPage__VariantProps = new Array<VariantPropType>();

export type PlasmicLearnPage__ArgsType = {};
type ArgPropType = keyof PlasmicLearnPage__ArgsType;
export const PlasmicLearnPage__ArgProps = new Array<ArgPropType>();

export type PlasmicLearnPage__OverridesType = {
  root?: Flex__<typeof PageWrapper>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  page?: Flex__<"div">;
  content?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  header?: Flex__<"div">;
  h1?: Flex__<"h1">;
  img?: Flex__<typeof PlasmicImg__>;
  body?: Flex__<typeof FramerMotion>;
  kicker?: Flex__<typeof Kicker>;
  h4?: Flex__<"h4">;
  ol?: Flex__<"ol">;
  li?: Flex__<"li">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultLearnPageProps {}

const $$ = {
  dayjs: __lib_dayjs
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLearnPage__RenderFunc(props: {
  variants: PlasmicLearnPage__VariantsArgs;
  args: PlasmicLearnPage__ArgsType;
  overrides: PlasmicLearnPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    maerifaGraphQl: usePlasmicDataOp(() => {
      return {
        sourceId: "aMgmeTWQBv5yDEivoQ6vB4",
        opId: "0ba2d7d1-0f63-487b-9922-27d7a0ee49bb",
        userArgs: {
          variables: [$ctx.params.url, $ctx.params.url]
        },
        cacheKey: `plasmic.$.0ba2d7d1-0f63-487b-9922-27d7a0ee49bb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageWrapper
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          bottomLineNavbar={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          children2={
            <div className={classNames(projectcss.all, sty.freeBox__lpgx7)}>
              <PlasmicHead
                data-plasmic-name={"pageMetadataOverride"}
                data-plasmic-override={overrides.pageMetadataOverride}
                className={classNames(
                  "__wab_instance",
                  sty.pageMetadataOverride
                )}
                description={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $queries.maerifaGraphQl.data.response.data.learn_by_id.body
                            .replace(/^"|"$/g, "")
                            .replace(/<[^>]*>/g, "")
                            .replace(/&nbsp;/g, "");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : undefined
                }
                image={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            "https://content.maerifasolutions.com/assets/" +
                            $queries.maerifaGraphQl.data.response.data
                              .learn_by_id.image.id +
                            "?width=1000&quality=50"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "/plasmic/maerifa_solutions/images/asset28Png.png";
                          }
                          throw e;
                        }
                      })()
                    : "/plasmic/maerifa_solutions/images/asset28Png.png"
                }
                title={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? `${$queries.maerifaGraphQl.data.response.data.learn_by_id.page_title} | Learn | Maerifa Solutions`
                    : "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                }
              />

              <div
                data-plasmic-name={"page"}
                data-plasmic-override={overrides.page}
                className={classNames(projectcss.all, sty.page)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  {(() => {
                    try {
                      return $queries.maerifaGraphQl.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={
                        '<svg width="100%" height="100%" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n  <style>\n    .spinner_5nOS{transform-origin:center;animation:spinner_sEAn .75s infinite linear}\n    @keyframes spinner_sEAn{100%{transform:rotate(360deg)}}\n  </style>\n  <path d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z" opacity=".15" fill="var(--token-5AI_Gda4ZPGN)"/>\n  <path d="M10.72,19.9a8,8,0,0,1-6.5-9.79A7.77,7.77,0,0,1,10.4,4.16a8,8,0,0,1,9.49,6.52A1.54,1.54,0,0,0,21.38,12h.13a1.37,1.37,0,0,0,1.38-1.54,11,11,0,1,0-12.7,12.39A1.54,1.54,0,0,0,12,21.34h0A1.47,1.47,0,0,0,10.72,19.9Z" class="spinner_5nOS" fill="var(--token-5AI_Gda4ZPGN)"/>\n</svg>'
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return !$queries.maerifaGraphQl.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"header"}
                      data-plasmic-override={overrides.header}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.header)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion___7BmTq
                        )}
                        delay={0.1}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.maerifaGraphQl.data.response
                                  .data.learn_by_id.page_title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Privacy Policy";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h1>
                      </FramerMotion>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__ok9TI
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "200px"
                              : "350px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          height={"350"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (
                                "https://content.maerifasolutions.com/assets/" +
                                $queries.maerifaGraphQl.data.response.data
                                  .learn_by_id.image.id +
                                "?width=1000&quality=50"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          width={"1000"}
                        />
                      </FramerMotion>
                    </Stack__>
                  ) : null}
                  {(() => {
                    try {
                      return !$queries.maerifaGraphQl.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FramerMotion
                      data-plasmic-name={"body"}
                      data-plasmic-override={overrides.body}
                      className={classNames("__wab_instance", sty.body)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2RlHc,
                          "policy"
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return $queries.maerifaGraphQl.data.response.data.learn_by_id.body.replace(
                                  /<\/p>/g,
                                  "</p><br><br>"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return '\n<h2>Introduction</h2>\n<p>This website, located at uniform resource locator www.maerifasolutions.com (the "Site"), is provided by Maerifa Solutions Ltd, a company established in Abu Dhabi Global Markets, Abu Dhabi, United Arab Emirates ("Maerifa Solutions", "we," "our," or "us") to the person accessing the Site ("you," or "your").  If you accept or agree to these Terms of Use on behalf of a company or other legal entity, you represent and warrant that you have the authority to bind that company or other legal entity to these Terms and, in such event, "you" and "your" will refer and apply to that company or other legal entity.</p>\n<h2>1. You Agree To These Terms By Using The Site</h2>\n<p>Your access to, and use of, the Site is subject to the following Terms of Use and all applicable laws and regulations. By accessing and using the Site, you accept, without limitation or qualification, these Terms of Use. Maerifa Solutions may, at any time and without notice, modify these Terms of Use by revising them on the Site.  Your continued use of the Site constitutes your acceptance of any such revisions.  You should therefore periodically visit this page to review the current Terms of Use.  You may not modify these Terms of Use except in a writing signed by Maerifa Solutions.  If you do not agree and accept, without limitation or qualification, these Terms of Use, you must exit the Site immediately.</p>\n<h2>2. Permitted Use Of The Site; Modifications</h2>  \n<p>The information and materials on the Site are provided for general informational purposes. You may use the Site solely for the purpose of learning about and/or using Maerifa Solutions services or products.  You may not use, reproduce or distribute the text, graphics, downloads, tools or any other content on the Site for any other purpose.</p>\n<p>Maerifa Solutions reserves the right, at its sole discretion, to modify, discontinue or terminate the Site or any services provided through the Site, or to modify these Terms of Use, at any time and without prior notice. If we modify these Terms of Use, we will post the modification on the Site or provide you with notice of the modification. We will also update the "Last Updated Date". By continuing to access or use the Site or using any of the services after we have posted a modification on the Site or have provided you with notice of a modification, you are indicating that you agree to be bound by the modified Terms of Use. If the modified Terms of Use are not acceptable to you, your only recourse is to cease using the Site and any services.</p>\n<h2>3. User Submitted Content</h2>\n<p>The Site may, from time to time offer interactive features that allow users to submit content to the Site. Maerifa Solutions does not and cannot review all such content, and is not responsible for such content.</p> \n<h3>3.1 User Responsibility</h3>\n<p>You acknowledge that by providing the ability to view and distribute your user-generated content on the Site, Maerifa Solutions is merely acting as a passive conduit for such distribution and is not undertaking any obligation or liability related thereto. However, Maerifa Solutions reserves the right to block or remove communications or materials that it determines to be unacceptable to Maerifa Solutions in its sole discretion.</p>\n<h3>3.2 Misuse of the Site</h3>\n<p>Misuse of the Site will be treated seriously and dealt with in accordance with UAE law. Without limitation:</p>\n<h4>3.2.1</h4> \n<p>Harassment in any manner or form on the Site, including via e-mail, chat, or by use of obscene or abusive language, or posting any obscene or abusive images or text, is strictly forbidden.</p>\n<h4>3.2.2</h4>\n<p>You may not upload to, distribute, or otherwise publish through the site any content which is libellous, defamatory, obscene, threatening, invasive of privacy or publicity rights, abusive, illegal, or otherwise objectionable which may constitute or encourage a criminal offense, violate the rights of any party or which may otherwise give rise to liability or violate any law.</p>\n<h2>4. Notice; Electronic Communications</h2>\n<p>When you visit the Site or send e-mails to Maerifa Solutions, you are communicating with us electronically. You consent to receive communications from us electronically. We will communicate with you by e-mail or by posting notices on the site. You agree that all agreements, notices, disclosures and other communications that we provide to you electronically satisfy any legal requirement that such communications be in writing.</p>\n<h2>5. Privacy</h2>\n<p>Maerifa Solutions\' Privacy Policy is incorporated and made part of these Terms of Use. You hereby agree to such Privacy Policy. Any personal data (for example, your name, email address, phone number, details of the preferences you express to us and technical information from the devices you use to access our website) that you transmit to e-mail addresses mentioned on the Site or otherwise will be used by Maerifa Solutions in accordance with the Privacy Policy. Any other communication or material you transmit to the Site, such as questions, comments, suggestions or the like, will be treated as non-confidential and non-proprietary.</p>\n<h2>6. Disclaimer - Warranty</h2>\n<p>THE SITE, ITS CONTENT, MATERIALS, SERVICES AND PRODUCTS ON THE SITE ARE PROVIDED "AS IS." TO THE FULLEST EXTENT PERMISSIBLE PURSUANT TO APPLICABLE LAW, MAERIFA SOLUTIONS HEREBY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.</p>\n<p>Maerifa Solutions does not represent or warrant that the functions contained in the Site will be uninterrupted or error-free, that the defects will be corrected, or that the Site or the server that makes the Site available are free of viruses or other harmful components. Maerifa Solutions does not make any warranties or representations regarding the use of the materials in the Site in terms of their correctness, accuracy, adequacy, usefulness, timeliness, reliability or otherwise.</p>\n<h2>7. Indemnification</h2>\n<p>You agree to indemnify, defend, and hold harmless Maerifa Solutions, its subsidiaries and affiliates, its officers, directors, employees, agents, licensors and suppliers from and against all losses, expenses, damages and costs, including reasonable attorneys\' fees, resulting from any violation of these Terms of Use or any activity related to your account (including negligent or wrongful conduct) by you or any other person accessing the Site using your internet account.</p>\n<h2>8. Limitations Of Liability</h2>\n<p>YOUR USE OF THE SITE IS AT YOUR OWN RISK. NEITHER MAERIFA SOLUTIONS, NOR ANY OF ITS SUBSIDIARIES, AFFILIATES, OFFICERS OR DIRECTORS, NOR ANY OF ITS AGENTS OR ANY OTHER PARTY INVOLVED IN CREATING, PRODUCING, OR DELIVERING THE SITE OR ITS CONTENT, ARE LIABLE FOR ANY DIRECT, INDIRECT, PUNITIVE, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR OTHER DAMAGES ARISING OUT OF OR IN ANY WAY CONNECTED WITH THE USE OF THE SITE WHETHER BASED ON CONTRACT, TORT, STRICT LIABILITY OR OTHERWISE, EVEN IF ADVISED OF THE POSSIBILITY OF ANY SUCH DAMAGES.</p>\n<h2>9. Third-Party Links</h2>\n<p>In an attempt to provide increased value to our visitors, Maerifa Solutions may link to sites operated by third parties. However, even if the third party is affiliated with Maerifa Solutions, Maerifa Solutions has no control over these linked sites, all of which may have separate privacy and data collection practices, independent of Maerifa Solutions. These linked sites are only for your convenience and therefore you access them at your own risk. Without limiting the foregoing, Maerifa Solutions specifically disclaims any responsibility if such sites: infringe any third party\'s intellectual property rights; are inaccurate, incomplete or misleading; are not merchantable or fit for a particular purpose; do not provide adequate security; contain viruses or other items of a destructive nature; or are libellous or defamatory.</p>\n<p>Maerifa Solutions does not endorse the content, or any products or services available, on such sites. Nonetheless, Maerifa Solutions seeks to protect the integrity of its Site and the links placed upon it and therefore requests any feedback on not only its own Site, but for sites it links to as well (including if a specific link does not work).</p>\n<h2>10. Copyright</h2>\n<p>The copyright and all other intellectual property ("IP") rights in the material contained in the Site belong to Maerifa Solutions and is protected by United Arab Emirates and international laws, all rights reserved. Without limitation, this content includes text, graphics, logos, button icons, images, audio clips, digital downloads, data compilations, and software. All software used on the Site is the property of Maerifa Solutions or its software suppliers and protected by United Arab Emirates and international copyright laws. You agree not to change or delete any proprietary notices from materials printed or downloaded from the Site.</p>\n<h2>11. Copyright Complaints</h2>\n<p>Maerifa Solutions respects the intellectual property of others. If you believe that your work has been copied in a way that constitutes copyright infringement, please contact us at admin@maerifasolutions.com.</p>\n<h2>12. Law And Jurisdiction</h2>\n<p>These Terms of Use and your use of the Site are governed by the laws of the United Arab Emirates and the Abu Dhabi Global Market (ADGM) without regard to its choice of law provisions. The courts of ADGM, will have exclusive jurisdiction over any and all disputes arising out of, relating to or concerning these Terms of Use and/or the Site or in which these Terms of Use and/or the Site are a material fact.</p>\n<h2>13. Assignment</h2>\n<p>You may not assign or transfer these Terms of Use, by operation of law or otherwise, without Maerifa Solutions\' prior written consent. Any attempt by you to assign or transfer these Terms of Use, without such consent, will be null and of no effect. Maerifa Solutions may assign or transfer these Terms, at its sole discretion, without restriction. Subject to the foregoing, these Terms will bind and inure to the benefit of the parties, their successors and permitted assigns.</p>\n<h2>14. Entire Agreement</h2>\n<p>These Terms of Use constitute the entire and exclusive understanding and agreement between Maerifa Solutions and you regarding the Site and related services and these Terms of Use supersede and replace any and all prior oral or written understandings or agreements between Maerifa Solutions and you regarding the Site and related services.</p>\n<h2>15. Questions And Feedback</h2>\n<p>We welcome your questions, comments, and concerns about the Site. Please send us any and all feedback pertaining to the Site to admin@maerifasolutions.com.</p>';
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                      <Kicker
                        data-plasmic-name={"kicker"}
                        data-plasmic-override={overrides.kicker}
                        className={classNames("__wab_instance", sty.kicker)}
                        color={"dark"}
                        text={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                                try {
                                  return (
                                    "Last Updated: " +
                                    $$.dayjs(
                                      $queries.maerifaGraphQl.data.response.data
                                        .learn_by_id.date_created
                                    ).format("DD MMMM YYYY")
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (
                                    "Last Updated: " +
                                    $$.dayjs(
                                      $queries.maerifaGraphQl.data.response.data
                                        .learn_by_id.date_created
                                    ).format("dddd DD MMMM YYYY")
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        }
                      />

                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sXakG
                        )}
                      >
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"References"}
                        </h4>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__usB3S,
                            "policy"
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <ol
                                data-plasmic-name={"ol"}
                                data-plasmic-override={overrides.ol}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.ol,
                                  sty.ol
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.maerifaGraphQl.data
                                        .response.data.learn_by_id.references;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <li
                                      data-plasmic-name={"li"}
                                      data-plasmic-override={overrides.li}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li,
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "breakword"
                                          : undefined
                                      )}
                                      key={currentIndex}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>{""}</React.Fragment>
                                        {
                                          <span
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.span,
                                              projectcss.__wab_text,
                                              projectcss.plasmic_default__inline,
                                              sty.span___0Xuil
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem
                                                    .references_id.text;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "test";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </span>
                                        }
                                        <React.Fragment>{""}</React.Fragment>
                                        {
                                          <span
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.span,
                                              projectcss.__wab_text,
                                              projectcss.plasmic_default__inline,
                                              sty.span___7Oj89
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem
                                                    .references_id.text &&
                                                    currentItem.references_id
                                                      .url
                                                    ? ": "
                                                    : "";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return ": ";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </span>
                                        }
                                        <React.Fragment>{""}</React.Fragment>
                                        {
                                          <PlasmicLink__
                                            data-plasmic-name={"link"}
                                            data-plasmic-override={
                                              overrides.link
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.a,
                                              projectcss.__wab_text,
                                              projectcss.plasmic_default__inline,
                                              sty.link
                                            )}
                                            component={Link}
                                            href={(() => {
                                              try {
                                                return currentItem.references_id
                                                  .url;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            platform={"nextjs"}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem
                                                    .references_id.url;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "url";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </PlasmicLink__>
                                        }
                                        <React.Fragment>{""}</React.Fragment>
                                      </React.Fragment>
                                    </li>
                                  );
                                })}
                              </ol>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </FramerMotion>
                  ) : null}
                </Stack__>
              </div>
            </div>
          }
          className={classNames("__wab_instance", sty.root)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "page",
    "content",
    "embedHtml",
    "header",
    "h1",
    "img",
    "body",
    "kicker",
    "h4",
    "ol",
    "li",
    "link"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  page: [
    "page",
    "content",
    "embedHtml",
    "header",
    "h1",
    "img",
    "body",
    "kicker",
    "h4",
    "ol",
    "li",
    "link"
  ],
  content: [
    "content",
    "embedHtml",
    "header",
    "h1",
    "img",
    "body",
    "kicker",
    "h4",
    "ol",
    "li",
    "link"
  ],
  embedHtml: ["embedHtml"],
  header: ["header", "h1", "img"],
  h1: ["h1"],
  img: ["img"],
  body: ["body", "kicker", "h4", "ol", "li", "link"],
  kicker: ["kicker"],
  h4: ["h4"],
  ol: ["ol", "li", "link"],
  li: ["li", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageWrapper;
  pageMetadataOverride: typeof PlasmicHead;
  page: "div";
  content: "div";
  embedHtml: typeof Embed;
  header: "div";
  h1: "h1";
  img: typeof PlasmicImg__;
  body: typeof FramerMotion;
  kicker: typeof Kicker;
  h4: "h4";
  ol: "ol";
  li: "li";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLearnPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLearnPage__VariantsArgs;
    args?: PlasmicLearnPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLearnPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLearnPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLearnPage__ArgProps,
          internalVariantPropNames: PlasmicLearnPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLearnPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLearnPage";
  } else {
    func.displayName = `PlasmicLearnPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLearnPage = Object.assign(
  // Top-level PlasmicLearnPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    page: makeNodeComponent("page"),
    content: makeNodeComponent("content"),
    embedHtml: makeNodeComponent("embedHtml"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    img: makeNodeComponent("img"),
    body: makeNodeComponent("body"),
    kicker: makeNodeComponent("kicker"),
    h4: makeNodeComponent("h4"),
    ol: makeNodeComponent("ol"),
    li: makeNodeComponent("li"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicLearnPage
    internalVariantProps: PlasmicLearnPage__VariantProps,
    internalArgProps: PlasmicLearnPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLearnPage;
/* prettier-ignore-end */
