// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: -v3BRRjBQBQZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageWrapper from "../../PageWrapper"; // plasmic-import: LxnEHVEe-YQz/component
import { PlasmicHead } from "@plasmicapp/react-web";
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import BentoBoxWorldMap from "../../BentoBoxWorldMap"; // plasmic-import: BlDT9nvXmxpX/component
import DropdownMenu2 from "../../DropdownMenu2"; // plasmic-import: dplT5okjZ4rM/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicLocations.module.css"; // plasmic-import: -v3BRRjBQBQZ/css

createPlasmicElementProxy;

export type PlasmicLocations__VariantMembers = {};
export type PlasmicLocations__VariantsArgs = {};
type VariantPropType = keyof PlasmicLocations__VariantsArgs;
export const PlasmicLocations__VariantProps = new Array<VariantPropType>();

export type PlasmicLocations__ArgsType = {};
type ArgPropType = keyof PlasmicLocations__ArgsType;
export const PlasmicLocations__ArgProps = new Array<ArgPropType>();

export type PlasmicLocations__OverridesType = {
  root?: Flex__<typeof PageWrapper>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  heroWrapper?: Flex__<"header">;
  heroInner?: Flex__<"div">;
  heroContent?: Flex__<"hgroup">;
  h1?: Flex__<"h1">;
  embedHtml?: Flex__<typeof Embed>;
  bentoBoxWorldMap?: Flex__<typeof BentoBoxWorldMap>;
  radialBg?: Flex__<"div">;
  h3?: Flex__<"h3">;
  span?: Flex__<"span">;
  dropdownMenu2?: Flex__<typeof DropdownMenu2>;
};

export interface DefaultLocationsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLocations__RenderFunc(props: {
  variants: PlasmicLocations__VariantsArgs;
  args: PlasmicLocations__ArgsType;
  overrides: PlasmicLocations__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "formSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentLocation",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [24.4539, 54.3773];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    locations: usePlasmicDataOp(() => {
      return {
        sourceId: "aMgmeTWQBv5yDEivoQ6vB4",
        opId: "cfaeb326-079c-48ea-a687-2d6208eba690",
        userArgs: {},
        cacheKey: `plasmic.$.cfaeb326-079c-48ea-a687-2d6208eba690.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageWrapper
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          bottomLineNavbar={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          children2={
            <div className={classNames(projectcss.all, sty.freeBox__mi4AM)}>
              <PlasmicHead
                data-plasmic-name={"pageMetadataOverride"}
                data-plasmic-override={overrides.pageMetadataOverride}
                className={classNames(
                  "__wab_instance",
                  sty.pageMetadataOverride
                )}
                image={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/plasmic/maerifa_solutions/images/asset28Png.png"
                    : "/plasmic/maerifa_solutions/images/asset28Png.png"
                }
                title={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                    : "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                }
              />

              <header
                data-plasmic-name={"heroWrapper"}
                data-plasmic-override={overrides.heroWrapper}
                className={classNames(projectcss.all, sty.heroWrapper)}
              >
                <div
                  data-plasmic-name={"heroInner"}
                  data-plasmic-override={overrides.heroInner}
                  className={classNames(projectcss.all, sty.heroInner)}
                >
                  <Stack__
                    as={"hgroup"}
                    data-plasmic-name={"heroContent"}
                    data-plasmic-override={overrides.heroContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.heroContent)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vkCfl)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__uP5UB
                        )}
                        delay={0.1}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"Our locations"}
                        </h1>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                </div>
              </header>
              <div className={classNames(projectcss.all, sty.freeBox__ke52U)}>
                {(() => {
                  try {
                    return $queries.locations.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      '<svg width="100%" height="100%" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n  <style>\n    .spinner_5nOS{transform-origin:center;animation:spinner_sEAn .75s infinite linear}\n    @keyframes spinner_sEAn{100%{transform:rotate(360deg)}}\n  </style>\n  <path d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z" opacity=".15" fill="var(--token-5AI_Gda4ZPGN)"/>\n  <path d="M10.72,19.9a8,8,0,0,1-6.5-9.79A7.77,7.77,0,0,1,10.4,4.16a8,8,0,0,1,9.49,6.52A1.54,1.54,0,0,0,21.38,12h.13a1.37,1.37,0,0,0,1.38-1.54,11,11,0,1,0-12.7,12.39A1.54,1.54,0,0,0,12,21.34h0A1.47,1.47,0,0,0,10.72,19.9Z" class="spinner_5nOS" fill="var(--token-5AI_Gda4ZPGN)"/>\n</svg>'
                    }
                  />
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fSiUn)}
                >
                  {(() => {
                    try {
                      return !$queries.locations.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__uot4U
                      )}
                    >
                      <BentoBoxWorldMap
                        data-plasmic-name={"bentoBoxWorldMap"}
                        data-plasmic-override={overrides.bentoBoxWorldMap}
                        className={classNames(
                          "__wab_instance",
                          sty.bentoBoxWorldMap
                        )}
                      />
                    </FramerMotion>
                  ) : null}
                </Stack__>
                <div
                  data-plasmic-name={"radialBg"}
                  data-plasmic-override={overrides.radialBg}
                  className={classNames(projectcss.all, sty.radialBg)}
                />

                {(() => {
                  try {
                    return !$queries.locations.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FramerMotion
                    className={classNames(
                      "__wab_instance",
                      sty.framerMotion__ypVO
                    )}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mZ9Xo)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.locations.data.response.data.continents.sort(
                              (a, b) => b.address.length - a.address.length
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uR4Ky
                            )}
                            id={(() => {
                              try {
                                return currentItem.continent;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                          >
                            <FramerMotion
                              className={classNames(
                                "__wab_instance",
                                sty.framerMotion___7Kif1
                              )}
                              delay={0.1}
                            >
                              <h3
                                data-plasmic-name={"h3"}
                                data-plasmic-override={overrides.h3}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{""}</React.Fragment>
                                  {
                                    <span
                                      data-plasmic-name={"span"}
                                      data-plasmic-override={overrides.span}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.span,
                                        projectcss.__wab_text,
                                        projectcss.plasmic_default__inline,
                                        sty.span
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.continent;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Continent";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </span>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </h3>
                              <FramerMotion
                                className={classNames(
                                  "__wab_instance",
                                  sty.framerMotion__l8YtO
                                )}
                              >
                                <DropdownMenu2
                                  data-plasmic-name={"dropdownMenu2"}
                                  data-plasmic-override={
                                    overrides.dropdownMenu2
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.dropdownMenu2
                                  )}
                                />
                              </FramerMotion>
                            </FramerMotion>
                            <FramerMotion
                              className={classNames(
                                "__wab_instance",
                                sty.framerMotion___81Ioi
                              )}
                              delay={0.2}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.address;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cPdLb
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__e6J8X
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address_id
                                              .line_1;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Whether you have questions about our server infrastructure solutions, or simply want to learn more about our innovative approach, we want to hear from you.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kAZd
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address_id
                                              .line_2;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Whether you have questions about our server infrastructure solutions, or simply want to learn more about our innovative approach, we want to hear from you.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__a1L7E
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address_id.city;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Whether you have questions about our server infrastructure solutions, or simply want to learn more about our innovative approach, we want to hear from you.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sjE8Z
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address_id
                                              .county_or_state;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Whether you have questions about our server infrastructure solutions, or simply want to learn more about our innovative approach, we want to hear from you.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qyr8K
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address_id
                                              .country;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Whether you have questions about our server infrastructure solutions, or simply want to learn more about our innovative approach, we want to hear from you.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__u1K4O
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address_id
                                              .postcode;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Whether you have questions about our server infrastructure solutions, or simply want to learn more about our innovative approach, we want to hear from you.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </FramerMotion>
                          </Stack__>
                        );
                      })}
                    </Stack__>
                  </FramerMotion>
                ) : null}
              </div>
            </div>
          }
          className={classNames("__wab_instance", sty.root)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "heroWrapper",
    "heroInner",
    "heroContent",
    "h1",
    "embedHtml",
    "bentoBoxWorldMap",
    "radialBg",
    "h3",
    "span",
    "dropdownMenu2"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  heroWrapper: ["heroWrapper", "heroInner", "heroContent", "h1"],
  heroInner: ["heroInner", "heroContent", "h1"],
  heroContent: ["heroContent", "h1"],
  h1: ["h1"],
  embedHtml: ["embedHtml"],
  bentoBoxWorldMap: ["bentoBoxWorldMap"],
  radialBg: ["radialBg"],
  h3: ["h3", "span"],
  span: ["span"],
  dropdownMenu2: ["dropdownMenu2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageWrapper;
  pageMetadataOverride: typeof PlasmicHead;
  heroWrapper: "header";
  heroInner: "div";
  heroContent: "hgroup";
  h1: "h1";
  embedHtml: typeof Embed;
  bentoBoxWorldMap: typeof BentoBoxWorldMap;
  radialBg: "div";
  h3: "h3";
  span: "span";
  dropdownMenu2: typeof DropdownMenu2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLocations__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLocations__VariantsArgs;
    args?: PlasmicLocations__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLocations__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLocations__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLocations__ArgProps,
          internalVariantPropNames: PlasmicLocations__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLocations__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLocations";
  } else {
    func.displayName = `PlasmicLocations.${nodeName}`;
  }
  return func;
}

export const PlasmicLocations = Object.assign(
  // Top-level PlasmicLocations renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    heroWrapper: makeNodeComponent("heroWrapper"),
    heroInner: makeNodeComponent("heroInner"),
    heroContent: makeNodeComponent("heroContent"),
    h1: makeNodeComponent("h1"),
    embedHtml: makeNodeComponent("embedHtml"),
    bentoBoxWorldMap: makeNodeComponent("bentoBoxWorldMap"),
    radialBg: makeNodeComponent("radialBg"),
    h3: makeNodeComponent("h3"),
    span: makeNodeComponent("span"),
    dropdownMenu2: makeNodeComponent("dropdownMenu2"),

    // Metadata about props expected for PlasmicLocations
    internalVariantProps: PlasmicLocations__VariantProps,
    internalArgProps: PlasmicLocations__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLocations;
/* prettier-ignore-end */
