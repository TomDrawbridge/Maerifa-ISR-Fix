// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: sMFUSm4Rse1n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CustomSwitch from "../../CustomSwitch"; // plasmic-import: j5VRkgxjZasu/codeComponent
import NavigationMenuComponent from "../../react-navigation-menu"; // plasmic-import: EVh_LE4eJe_P/codeComponent
import NavbarA from "../../NavbarA"; // plasmic-import: h_y4PEdWwbTE/component
import NavbarItem from "../../NavbarItem"; // plasmic-import: RtMPv5Ty0hfh/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "./plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: sMFUSm4Rse1n/css

import ForWhiteBackgroundSvgIcon from "./icons/PlasmicIcon__ForWhiteBackgroundSvg"; // plasmic-import: bQrEUghiiNPA/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: lxU0WKGHeNgT/icon
import SunSvgrepoComSvgIcon from "./icons/PlasmicIcon__SunSvgrepoComSvg"; // plasmic-import: GBAmxiFcI80u/icon
import MoonSvgrepoComSvgIcon from "./icons/PlasmicIcon__MoonSvgrepoComSvg"; // plasmic-import: VzXt7ldNpp_u/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {
  bottomLine: "bottomLine";
  open: "open";
};
export type PlasmicNavbar__VariantsArgs = {
  bottomLine?: SingleBooleanChoiceArg<"bottomLine">;
  open?: SingleBooleanChoiceArg<"open">;
};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "bottomLine",
  "open"
);

export type PlasmicNavbar__ArgsType = {
  onDropdownVisibleChange?: (val: string) => void;
  colorMode?: boolean;
};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>(
  "onDropdownVisibleChange",
  "colorMode"
);

export type PlasmicNavbar__OverridesType = {
  navbarWrapper?: Flex__<"div">;
  navbar?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  navigationMenuComponent?: Flex__<typeof NavigationMenuComponent>;
};

export interface DefaultNavbarProps {
  onDropdownVisibleChange?: (val: string) => void;
  colorMode?: boolean;
  bottomLine?: SingleBooleanChoiceArg<"bottomLine">;
  open?: SingleBooleanChoiceArg<"open">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          colorMode: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "bottomLine",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bottomLine
      },
      {
        path: "dropdownVisible",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onChangeProp: "onDropdownVisibleChange"
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    navbarItems2: usePlasmicDataOp(() => {
      return {
        sourceId: "aMgmeTWQBv5yDEivoQ6vB4",
        opId: "f81985ed-4717-4720-9554-dac4b691ad39",
        userArgs: {},
        cacheKey: `plasmic.$.f81985ed-4717-4720-9554-dac4b691ad39.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <div
      data-plasmic-name={"navbarWrapper"}
      data-plasmic-override={overrides.navbarWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.navbarWrapper,
        {
          [sty.navbarWrapperbottomLine]: hasVariant(
            $state,
            "bottomLine",
            "bottomLine"
          ),
          [sty.navbarWrapperopen]: hasVariant($state, "open", "open")
        }
      )}
    >
      <div
        data-plasmic-name={"navbar"}
        data-plasmic-override={overrides.navbar}
        className={classNames(projectcss.all, sty.navbar, {
          [sty.navbarbottomLine]: hasVariant(
            $state,
            "bottomLine",
            "bottomLine"
          ),
          [sty.navbaropen]: hasVariant($state, "open", "open")
        })}
        onMouseLeave={async event => {
          const $steps = {};

          $steps["updateDropdownVisible"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["dropdownVisible"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDropdownVisible"] != null &&
            typeof $steps["updateDropdownVisible"] === "object" &&
            typeof $steps["updateDropdownVisible"].then === "function"
          ) {
            $steps["updateDropdownVisible"] = await $steps[
              "updateDropdownVisible"
            ];
          }
        }}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___1D3XT, {
            [sty.freeBoxbottomLine___1D3XTUc9Vo]: hasVariant(
              $state,
              "bottomLine",
              "bottomLine"
            )
          })}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__rrb0O, {
            [sty.freeBoxbottomLine__rrb0OUc9Vo]: hasVariant(
              $state,
              "bottomLine",
              "bottomLine"
            ),
            [sty.freeBoxopen__rrb0OdYYyU]: hasVariant($state, "open", "open")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__yjhIx, {
              [sty.freeBoxbottomLine__yjhIxUc9Vo]: hasVariant(
                $state,
                "bottomLine",
                "bottomLine"
              )
            })}
          >
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={`/`}
              platform={"nextjs"}
            >
              <ForWhiteBackgroundSvgIcon
                className={classNames(projectcss.all, sty.svg__nbPln, {
                  [sty.svgbottomLine__nbPlnUc9Vo]: hasVariant(
                    $state,
                    "bottomLine",
                    "bottomLine"
                  )
                })}
                role={"img"}
              />

              <ForWhiteBackgroundSvgIcon
                className={classNames(projectcss.all, sty.svg__dElzj, {
                  [sty.svgbottomLine__dElzjUc9Vo]: hasVariant(
                    $state,
                    "bottomLine",
                    "bottomLine"
                  )
                })}
                role={"img"}
              />
            </PlasmicLink__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lQorl, {
              [sty.freeBoxbottomLine__lQorlUc9Vo]: hasVariant(
                $state,
                "bottomLine",
                "bottomLine"
              ),
              [sty.freeBoxopen__lQorldYYyU]: hasVariant($state, "open", "open")
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateOpen"] = true
                ? (() => {
                    const actionArgs = { vgroup: "open", operation: 2 };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = $stateGet($state, vgroup);
                      $stateSet($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateOpen"] != null &&
                typeof $steps["updateOpen"] === "object" &&
                typeof $steps["updateOpen"].then === "function"
              ) {
                $steps["updateOpen"] = await $steps["updateOpen"];
              }
            }}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Icon31Icon
                  : Icon31Icon
              }
              className={classNames(projectcss.all, sty.svg__jq7Ie, {
                [sty.svgopen__jq7IEdYYyU]: hasVariant($state, "open", "open")
              })}
              role={"img"}
            />
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__rrlZl, {
              [sty.freeBoxopen__rrlZldYYyU]: hasVariant($state, "open", "open")
            })}
          >
            <SunSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__sm7HR)}
              role={"img"}
            />

            <CustomSwitch
              activeColor={"#000000"}
              backgroundColor={"#33527B50"}
              className={classNames("__wab_instance", sty.customSwitch__rjS24)}
              defaultChecked={(() => {
                try {
                  return $ctx.theme.theme == "dark";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              inactiveColor={"#1D99FF"}
              onActivate={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $ctx.theme.setTheme("dark");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onDeactivate={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $ctx.theme.setTheme("light");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            />

            <MoonSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__cWx95)}
              role={"img"}
            />
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lfMc7, {
            [sty.freeBoxbottomLine__lfMc7Uc9Vo]: hasVariant(
              $state,
              "bottomLine",
              "bottomLine"
            ),
            [sty.freeBoxopen__lfMc7DYYyU]: hasVariant($state, "open", "open")
          })}
        >
          <NavigationMenuComponent
            data-plasmic-name={"navigationMenuComponent"}
            data-plasmic-override={overrides.navigationMenuComponent}
            children2={
              <NavbarA
                className={classNames("__wab_instance", sty.navbarA__aoEr2)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.navbarItems2.data.response.data.learn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <NavbarItem
                      className={classNames(
                        "__wab_instance",
                        sty.navbarItem__fPuFi
                      )}
                      description={``}
                      destination={`/learn/[url]`}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/learn/${(() => {
                                  try {
                                    return currentItem.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      title={(() => {
                        try {
                          return currentItem.page_title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </NavbarA>
            }
            children3={
              <NavbarA
                className={classNames("__wab_instance", sty.navbarA__i0GWu)}
              >
                <NavbarItem
                  className={classNames("__wab_instance", sty.navbarItem__eCL)}
                  description={
                    "Leveraging cross-sector expertise, Maerifa Solutions develops custom solutions that address the specific challenges of each industry"
                  }
                  destination={`/our-approach`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToOurApproach"] = true
                      ? (() => {
                          const actionArgs = { destination: `/our-approach` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToOurApproach"] != null &&
                      typeof $steps["goToOurApproach"] === "object" &&
                      typeof $steps["goToOurApproach"].then === "function"
                    ) {
                      $steps["goToOurApproach"] = await $steps[
                        "goToOurApproach"
                      ];
                    }
                  }}
                  title={"Our approach"}
                />

                <NavbarItem
                  className={classNames(
                    "__wab_instance",
                    sty.navbarItem__bPlBc
                  )}
                  description={
                    "Maerifa Solutions combines financial expertise and technology insight to help clients leverage data for a competitive advantage"
                  }
                  destination={`/team`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToTeam"] = true
                      ? (() => {
                          const actionArgs = { destination: `/team` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToTeam"] != null &&
                      typeof $steps["goToTeam"] === "object" &&
                      typeof $steps["goToTeam"].then === "function"
                    ) {
                      $steps["goToTeam"] = await $steps["goToTeam"];
                    }
                  }}
                  title={"Team"}
                />

                <NavbarItem
                  className={classNames(
                    "__wab_instance",
                    sty.navbarItem___6VaE2
                  )}
                  description={
                    "Operating from key regions worldwide, Maerifa Solutions leads the charge in global server infrastructure innovation"
                  }
                  destination={`/locations`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToLocations"] = true
                      ? (() => {
                          const actionArgs = { destination: `/locations` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToLocations"] != null &&
                      typeof $steps["goToLocations"] === "object" &&
                      typeof $steps["goToLocations"].then === "function"
                    ) {
                      $steps["goToLocations"] = await $steps["goToLocations"];
                    }
                  }}
                  title={"Locations"}
                />

                <NavbarItem
                  className={classNames("__wab_instance", sty.navbarItem__hpir)}
                  description={``}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToImpact"] = true
                      ? (() => {
                          const actionArgs = { destination: `/impact` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToImpact"] != null &&
                      typeof $steps["goToImpact"] === "object" &&
                      typeof $steps["goToImpact"].then === "function"
                    ) {
                      $steps["goToImpact"] = await $steps["goToImpact"];
                    }
                  }}
                  title={"Impact"}
                />
              </NavbarA>
            }
            className={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "navmenu"
                : `` +
                  " " +
                  classNames("__wab_instance", sty.navigationMenuComponent, {
                    [sty.navigationMenuComponentopen]: hasVariant(
                      $state,
                      "open",
                      "open"
                    )
                  })
            }
            classNameList={
              hasVariant(globalVariants, "screen", "mobileOnly") ? "mobile" : ``
            }
          >
            <NavbarA
              className={classNames("__wab_instance", sty.navbarA__gTPie)}
              type={"products"}
            />
          </NavigationMenuComponent>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox___4QEvz)}>
              <SunSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__tMiaj)}
                role={"img"}
              />

              <CustomSwitch
                activeColor={"#000000"}
                backgroundColor={"#33527B50"}
                className={classNames(
                  "__wab_instance",
                  sty.customSwitch__oZpMa
                )}
                defaultChecked={(() => {
                  try {
                    return $ctx.theme.theme == "dark";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                inactiveColor={"#1D99FF"}
                onActivate={async () => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $ctx.theme.setTheme("dark");
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onDeactivate={async () => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $ctx.theme.setTheme("light");
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              />

              <MoonSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___0XaW)}
                role={"img"}
              />
            </div>
          ) : null}
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navbarWrapper: ["navbarWrapper", "navbar", "link", "navigationMenuComponent"],
  navbar: ["navbar", "link", "navigationMenuComponent"],
  link: ["link"],
  navigationMenuComponent: ["navigationMenuComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navbarWrapper: "div";
  navbar: "div";
  link: "a";
  navigationMenuComponent: typeof NavigationMenuComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbarWrapper") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("navbarWrapper"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    link: makeNodeComponent("link"),
    navigationMenuComponent: makeNodeComponent("navigationMenuComponent"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
