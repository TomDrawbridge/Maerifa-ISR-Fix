// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: h_y4PEdWwbTE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarItem from "../../NavbarItem"; // plasmic-import: RtMPv5Ty0hfh/component
import ReadMoreButton from "../../ReadMoreButton"; // plasmic-import: a1-R-Fsk1xJU/component
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicNavbarA.module.css"; // plasmic-import: h_y4PEdWwbTE/css

createPlasmicElementProxy;

export type PlasmicNavbarA__VariantMembers = {
  type: "products";
};
export type PlasmicNavbarA__VariantsArgs = {
  type?: SingleChoiceArg<"products">;
};
type VariantPropType = keyof PlasmicNavbarA__VariantsArgs;
export const PlasmicNavbarA__VariantProps = new Array<VariantPropType>("type");

export type PlasmicNavbarA__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNavbarA__ArgsType;
export const PlasmicNavbarA__ArgProps = new Array<ArgPropType>("children");

export type PlasmicNavbarA__OverridesType = {
  root?: Flex__<"div">;
  menu1?: Flex__<"div">;
  h4?: Flex__<"h4">;
  text?: Flex__<"div">;
  readMoreButton?: Flex__<typeof ReadMoreButton>;
  framerMotion?: Flex__<typeof FramerMotion>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultNavbarAProps {
  children?: React.ReactNode;
  type?: SingleChoiceArg<"products">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbarA__RenderFunc(props: {
  variants: PlasmicNavbarA__VariantsArgs;
  args: PlasmicNavbarA__ArgsType;
  overrides: PlasmicNavbarA__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.roottype_products]: hasVariant($state, "type", "products") }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"menu1"}
        data-plasmic-override={overrides.menu1}
        hasGap={true}
        className={classNames(projectcss.all, sty.menu1, {
          [sty.menu1type_products]: hasVariant($state, "type", "products")
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__afzoP, {
            [sty.freeBoxtype_products__afzoP3AEp5]: hasVariant(
              $state,
              "type",
              "products"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </Stack__>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__elCw7, {
          [sty.freeBoxtype_products__elCw73AEp5]: hasVariant(
            $state,
            "type",
            "products"
          )
        })}
      />

      {(hasVariant($state, "type", "products") ? true : false) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sWvbC, {
            [sty.freeBoxtype_products__sWvbC3AEp5]: hasVariant(
              $state,
              "type",
              "products"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___9PLqf, {
              [sty.freeBoxtype_products___9PLqf3AEp5]: hasVariant(
                $state,
                "type",
                "products"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.freeBox__zzwaE,
                "no-pointer",
                {
                  [sty.freeBoxtype_products__zzwaE3AEp5]: hasVariant(
                    $state,
                    "type",
                    "products"
                  )
                }
              )}
              style={
                hasVariant($state, "type", "products")
                  ? (() => {
                      try {
                        return { pointerEvents: "none" };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return { pointerEvents: "none !important" };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
            >
              <NavbarItem
                className={classNames("__wab_instance", sty.navbarItem__wdFVp, {
                  [sty.navbarItemtype_products__wdFVp3AEp5]: hasVariant(
                    $state,
                    "type",
                    "products"
                  )
                })}
                description={
                  hasVariant($state, "type", "products")
                    ? "Nvidia AI Enterprise Suite offers AI models, services, and platform software, paired with Supermicro AI Supercomputers, high-bandwidth file systems from VAST and DDN, and Supermicro's SSM and SCC management software"
                    : "NVIDIA AI Enterprise Suite, SMC SCO, SMC Infrastructure, Intel CPUs & Accelerators, AMD CPUs & NVIDIA GPUs"
                }
                destination={
                  hasVariant($state, "type", "products") ? "" : `/build-with-us`
                }
                title={
                  hasVariant($state, "type", "products")
                    ? "Artificial intelligence"
                    : "Artificial Intelligence"
                }
              />

              <NavbarItem
                className={classNames("__wab_instance", sty.navbarItem__ttx2G, {
                  [sty.navbarItemtype_products__ttx2G3AEp5]: hasVariant(
                    $state,
                    "type",
                    "products"
                  )
                })}
                description={
                  hasVariant($state, "type", "products")
                    ? "Enterprise and scientific research reference designs, Supermicro SuperBlade, Twin Pro, and BigTwin systems with Infiniband or 25G networks, VAST and DDN parallel file systems, and optional liquid cooling"
                    : "Bright, SMC SCO, SMC Infrastructure, Intel CPUs & Accelerators, AMD CPUs, NVIDIA GPUs"
                }
                destination={
                  hasVariant($state, "type", "products") ? "" : `/build-with-us`
                }
                title={"HPC"}
              />

              <NavbarItem
                className={classNames("__wab_instance", sty.navbarItem__s2Feh, {
                  [sty.navbarItemtype_products__s2Feh3AEp5]: hasVariant(
                    $state,
                    "type",
                    "products"
                  )
                })}
                description={
                  hasVariant($state, "type", "products")
                    ? "Supermicro micro-cloud with 1u, 2u Hyper servers supporting Google Distributed Cloud"
                    : "Nutanix, Microsoft, VMware, Kubernetes, SMC Infrastructure, Intel CPUs, & AMD CPUs"
                }
                destination={
                  hasVariant($state, "type", "products") ? "" : `/build-with-us`
                }
                title={
                  hasVariant($state, "type", "products")
                    ? "Hybrid cloud"
                    : "Hybrid cloud"
                }
              />
            </Stack__>
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__d4Jzb, {
              [sty.freeBoxtype_products__d4Jzb3AEp5]: hasVariant(
                $state,
                "type",
                "products"
              )
            })}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xqV4C, {
              [sty.freeBoxtype_products__xqV4C3AEp5]: hasVariant(
                $state,
                "type",
                "products"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__djGf1)}
            >
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4,
                  {
                    [sty.h4type_products]: hasVariant(
                      $state,
                      "type",
                      "products"
                    )
                  }
                )}
              >
                {"Nvidia H100"}
              </h4>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text,
                  {
                    [sty.texttype_products]: hasVariant(
                      $state,
                      "type",
                      "products"
                    )
                  }
                )}
              >
                {hasVariant($state, "type", "products")
                  ? "Unparalleled performance for advanced AI workloads and high-performance computing"
                  : "Unparalleled performance for advanced AI workloads and high-performance computing."}
              </div>
              <ReadMoreButton
                data-plasmic-name={"readMoreButton"}
                data-plasmic-override={overrides.readMoreButton}
                className={classNames("__wab_instance", sty.readMoreButton, {
                  [sty.readMoreButtontype_products]: hasVariant(
                    $state,
                    "type",
                    "products"
                  )
                })}
                destination={
                  hasVariant($state, "type", "products")
                    ? `/products`
                    : `/build-with-us`
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xiWlq, {
                [sty.freeBoxtype_products__xiWlq3AEp5]: hasVariant(
                  $state,
                  "type",
                  "products"
                )
              })}
            >
              <FramerMotion
                data-plasmic-name={"framerMotion"}
                data-plasmic-override={overrides.framerMotion}
                animate={{ y: 0, x: 0, opacity: 1 }}
                className={classNames("__wab_instance", sty.framerMotion, {
                  [sty.framerMotiontype_products]: hasVariant(
                    $state,
                    "type",
                    "products"
                  )
                })}
                delay={0}
                initial={
                  hasVariant($state, "type", "products")
                    ? { y: 0, x: 25, opacity: 0 }
                    : { y: 0, x: 0, opacity: 0 }
                }
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img, {
                    [sty.imgtype_products]: hasVariant(
                      $state,
                      "type",
                      "products"
                    )
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant($state, "type", "products") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "100%"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/maerifa_solutions/images/image6Png.png",
                    fullWidth: 395,
                    fullHeight: 838,
                    aspectRatio: undefined
                  }}
                />
              </FramerMotion>
            </Stack__>
          </Stack__>
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "menu1",
    "h4",
    "text",
    "readMoreButton",
    "framerMotion",
    "img"
  ],
  menu1: ["menu1"],
  h4: ["h4"],
  text: ["text"],
  readMoreButton: ["readMoreButton"],
  framerMotion: ["framerMotion", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menu1: "div";
  h4: "h4";
  text: "div";
  readMoreButton: typeof ReadMoreButton;
  framerMotion: typeof FramerMotion;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarA__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarA__VariantsArgs;
    args?: PlasmicNavbarA__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarA__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbarA__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbarA__ArgProps,
          internalVariantPropNames: PlasmicNavbarA__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarA__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarA";
  } else {
    func.displayName = `PlasmicNavbarA.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarA = Object.assign(
  // Top-level PlasmicNavbarA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menu1: makeNodeComponent("menu1"),
    h4: makeNodeComponent("h4"),
    text: makeNodeComponent("text"),
    readMoreButton: makeNodeComponent("readMoreButton"),
    framerMotion: makeNodeComponent("framerMotion"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNavbarA
    internalVariantProps: PlasmicNavbarA__VariantProps,
    internalArgProps: PlasmicNavbarA__ArgProps
  }
);

export default PlasmicNavbarA;
/* prettier-ignore-end */
