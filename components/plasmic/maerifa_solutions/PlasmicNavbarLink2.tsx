// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: t9A2zMjk460L

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicNavbarLink2.module.css"; // plasmic-import: t9A2zMjk460L/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: bWq-MuzJfWjU/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: 0fG2IaNlxY5c/icon

createPlasmicElementProxy;

export type PlasmicNavbarLink2__VariantMembers = {
  colour: "alt";
  activePage: "activePage";
  dropdown: "dropdown";
};
export type PlasmicNavbarLink2__VariantsArgs = {
  colour?: SingleChoiceArg<"alt">;
  activePage?: SingleBooleanChoiceArg<"activePage">;
  dropdown?: SingleBooleanChoiceArg<"dropdown">;
};
type VariantPropType = keyof PlasmicNavbarLink2__VariantsArgs;
export const PlasmicNavbarLink2__VariantProps = new Array<VariantPropType>(
  "colour",
  "activePage",
  "dropdown"
);

export type PlasmicNavbarLink2__ArgsType = {
  destination?: string;
  onVariableChange?: (val: string) => void;
  text?: string;
  onMouseEnter?: (event: any) => void;
};
type ArgPropType = keyof PlasmicNavbarLink2__ArgsType;
export const PlasmicNavbarLink2__ArgProps = new Array<ArgPropType>(
  "destination",
  "onVariableChange",
  "text",
  "onMouseEnter"
);

export type PlasmicNavbarLink2__OverridesType = {
  root?: Flex__<"a"> & Partial<LinkProps>;
  text?: Flex__<"div">;
  activeLine?: Flex__<"div">;
};

export interface DefaultNavbarLink2Props {
  destination?: string;
  onVariableChange?: (val: string) => void;
  text?: string;
  onMouseEnter?: (event: any) => void;
  colour?: SingleChoiceArg<"alt">;
  activePage?: SingleBooleanChoiceArg<"activePage">;
  dropdown?: SingleBooleanChoiceArg<"dropdown">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbarLink2__RenderFunc(props: {
  variants: PlasmicNavbarLink2__VariantsArgs;
  args: PlasmicNavbarLink2__ArgsType;
  overrides: PlasmicNavbarLink2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          text: "Text"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "colour",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.colour
      },
      {
        path: "activePage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.activePage
      },
      {
        path: "variable",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.destination;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),

        onChangeProp: "onVariableChange"
      },
      {
        path: "dropdown",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dropdown
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootactivePage]: hasVariant($state, "activePage", "activePage"),
          [sty.rootdropdown]: hasVariant($state, "dropdown", "dropdown")
        }
      )}
      component={Link}
      onMouseEnter={args.onMouseEnter}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textactivePage]: hasVariant($state, "activePage", "activePage"),
          [sty.textcolour_alt]: hasVariant($state, "colour", "alt"),
          [sty.textdropdown]: hasVariant($state, "dropdown", "dropdown")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Products";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Icon4Icon
        className={classNames(projectcss.all, sty.svg___2SgI1)}
        role={"img"}
      />

      <div
        data-plasmic-name={"activeLine"}
        data-plasmic-override={overrides.activeLine}
        className={classNames(projectcss.all, sty.activeLine, {
          [sty.activeLineactivePage]: hasVariant(
            $state,
            "activePage",
            "activePage"
          )
        })}
      />

      {(
        hasVariant($state, "dropdown", "dropdown")
          ? true
          : (() => {
              try {
                return $props.dropdown;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <ChevronDownSvgIcon
          className={classNames(projectcss.all, sty.svg__f4IxJ, {
            [sty.svgdropdown__f4IxJnn7Uo]: hasVariant(
              $state,
              "dropdown",
              "dropdown"
            )
          })}
          role={"img"}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "activeLine"],
  text: ["text"],
  activeLine: ["activeLine"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  text: "div";
  activeLine: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarLink2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarLink2__VariantsArgs;
    args?: PlasmicNavbarLink2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarLink2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbarLink2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbarLink2__ArgProps,
          internalVariantPropNames: PlasmicNavbarLink2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarLink2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarLink2";
  } else {
    func.displayName = `PlasmicNavbarLink2.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarLink2 = Object.assign(
  // Top-level PlasmicNavbarLink2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    activeLine: makeNodeComponent("activeLine"),

    // Metadata about props expected for PlasmicNavbarLink2
    internalVariantProps: PlasmicNavbarLink2__VariantProps,
    internalArgProps: PlasmicNavbarLink2__ArgProps
  }
);

export default PlasmicNavbarLink2;
/* prettier-ignore-end */
