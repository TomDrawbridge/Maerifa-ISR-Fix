// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: OwyLGRrrXPxl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageWrapper from "../../PageWrapper"; // plasmic-import: LxnEHVEe-YQz/component
import { PlasmicHead } from "@plasmicapp/react-web";
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent
import Kicker from "../../Kicker"; // plasmic-import: sRJYTCOVASaN/component

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicOurApproach.module.css"; // plasmic-import: OwyLGRrrXPxl/css

createPlasmicElementProxy;

export type PlasmicOurApproach__VariantMembers = {};
export type PlasmicOurApproach__VariantsArgs = {};
type VariantPropType = keyof PlasmicOurApproach__VariantsArgs;
export const PlasmicOurApproach__VariantProps = new Array<VariantPropType>();

export type PlasmicOurApproach__ArgsType = {};
type ArgPropType = keyof PlasmicOurApproach__ArgsType;
export const PlasmicOurApproach__ArgProps = new Array<ArgPropType>();

export type PlasmicOurApproach__OverridesType = {
  root?: Flex__<typeof PageWrapper>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  heroWrapper?: Flex__<"header">;
  heroInner?: Flex__<"div">;
  heroContent?: Flex__<"hgroup">;
  kicker?: Flex__<typeof Kicker>;
  h1?: Flex__<"h1">;
  pageContent?: Flex__<"section">;
  h2?: Flex__<"h2">;
};

export interface DefaultOurApproachProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOurApproach__RenderFunc(props: {
  variants: PlasmicOurApproach__VariantsArgs;
  args: PlasmicOurApproach__ArgsType;
  overrides: PlasmicOurApproach__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "formSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicOurApproach.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicOurApproach.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicOurApproach.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageWrapper
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          bottomLineNavbar={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          children2={
            <div className={classNames(projectcss.all, sty.freeBox__ihi5Y)}>
              <PlasmicHead
                data-plasmic-name={"pageMetadataOverride"}
                data-plasmic-override={overrides.pageMetadataOverride}
                className={classNames(
                  "__wab_instance",
                  sty.pageMetadataOverride
                )}
                image={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/plasmic/maerifa_solutions/images/asset28Png.png"
                    : "/plasmic/maerifa_solutions/images/asset28Png.png"
                }
                title={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                    : ``
                }
              />

              <header
                data-plasmic-name={"heroWrapper"}
                data-plasmic-override={overrides.heroWrapper}
                className={classNames(projectcss.all, sty.heroWrapper)}
              >
                <div
                  data-plasmic-name={"heroInner"}
                  data-plasmic-override={overrides.heroInner}
                  className={classNames(projectcss.all, sty.heroInner)}
                >
                  <Stack__
                    as={"hgroup"}
                    data-plasmic-name={"heroContent"}
                    data-plasmic-override={overrides.heroContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.heroContent)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__knRVw
                      )}
                      delay={0}
                    >
                      <Kicker
                        data-plasmic-name={"kicker"}
                        data-plasmic-override={overrides.kicker}
                        className={classNames("__wab_instance", sty.kicker)}
                        color={"dark"}
                        text={"Our Leadership"}
                      />
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kB4YZ)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__xIPc
                        )}
                        delay={0.1}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"Our approach"}
                        </h1>
                      </FramerMotion>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__cRpgD
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ls6Rd
                          )}
                        >
                          {
                            "In an ever-changing world, Maerifa Solutions brings together experienced people, state-of-the-art technology, financial acumen and services, to deliver a consultancy-led business-first approach, enabling customers to extract the maximum value from their data for competitive advantage"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                </div>
              </header>
              <section
                data-plasmic-name={"pageContent"}
                data-plasmic-override={overrides.pageContent}
                className={classNames(projectcss.all, sty.pageContent)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tN0Q7)}
                  id={"scroll"}
                >
                  <FramerMotion
                    className={classNames(
                      "__wab_instance",
                      sty.framerMotion__iHvHr
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7F5Av
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__boFg)}
                        displayHeight={"auto"}
                        displayMaxHeight={"300px"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"300px"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/maerifa_solutions/images/aboutUsShutterstock1962418681Jpg.jpg",
                          fullWidth: 8884,
                          fullHeight: 2827,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ceFtq
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__stRSc
                        )}
                      />
                    </div>
                  </FramerMotion>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___55HBg)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tzNqX)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tqYwm
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__waSFm
                          )}
                          delay={0.1}
                        >
                          <h2
                            data-plasmic-name={"h2"}
                            data-plasmic-override={overrides.h2}
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2
                            )}
                          >
                            {"Global expertise across diverse industries"}
                          </h2>
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__j62Rg
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lUhMj
                          )}
                        >
                          {
                            "Our approach is achieved through our industry knowledge and expertise, coupled with shareholder knowledge and network access across diverse industries, encompassing global market leaders in major Financial Institutions, Datacentre, Maritime, Crypto, Gaming and Telco"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oohpi)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__qfJta
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gqeYr
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___7WXdk)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/shutterstock2485116241Jpg.jpg",
                            fullWidth: 4240,
                            fullHeight: 2832,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__j5Kr3
                          )}
                        />
                      </div>
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tBiXp)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kNni
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__jv0LT
                          )}
                          delay={0.1}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__uWxct
                            )}
                          >
                            {
                              "Tailored solutions for short and long-term success"
                            }
                          </h3>
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__usbY7
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oLfqm
                          )}
                        >
                          {
                            "Our technology consultancy team, seek to derive value for our customers by tailoring best-in-class solutions from leading technology vendors. The team focus on the required outcomes and objectives, both in the short and long-term, whilst maintaining attention on both investment and futureproofing"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__o98H)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___05PxS
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kfjJ
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__eqfre
                          )}
                          delay={0.1}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__xfyke
                            )}
                          >
                            {
                              "Leadership with financial acumen and global reach"
                            }
                          </h3>
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion___1DYUl
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wQbC3
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "Our Board and Shareholder base is comprised of leading financial talent with mature network access into global markets and understanding of success\n\n"
                              }
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__pcn1Q
                                )}
                              >
                                {
                                  "This enables Maerifa Solutions to act as a long-term growth partner to our clients with the aim of unlocking significant future value"
                                }
                              </span>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </FramerMotion>
                    </Stack__>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__hw5Pc
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v7LDa
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__wwSgu)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/leadershipShutterstock2032765655Jpg.jpg",
                            fullWidth: 8333,
                            fullHeight: 8333,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eLMbf
                          )}
                        />
                      </div>
                    </FramerMotion>
                  </Stack__>
                </Stack__>
              </section>
            </div>
          }
          className={classNames("__wab_instance", sty.root)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "heroWrapper",
    "heroInner",
    "heroContent",
    "kicker",
    "h1",
    "pageContent",
    "h2"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  heroWrapper: ["heroWrapper", "heroInner", "heroContent", "kicker", "h1"],
  heroInner: ["heroInner", "heroContent", "kicker", "h1"],
  heroContent: ["heroContent", "kicker", "h1"],
  kicker: ["kicker"],
  h1: ["h1"],
  pageContent: ["pageContent", "h2"],
  h2: ["h2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageWrapper;
  pageMetadataOverride: typeof PlasmicHead;
  heroWrapper: "header";
  heroInner: "div";
  heroContent: "hgroup";
  kicker: typeof Kicker;
  h1: "h1";
  pageContent: "section";
  h2: "h2";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOurApproach__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOurApproach__VariantsArgs;
    args?: PlasmicOurApproach__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOurApproach__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOurApproach__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOurApproach__ArgProps,
          internalVariantPropNames: PlasmicOurApproach__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOurApproach__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOurApproach";
  } else {
    func.displayName = `PlasmicOurApproach.${nodeName}`;
  }
  return func;
}

export const PlasmicOurApproach = Object.assign(
  // Top-level PlasmicOurApproach renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    heroWrapper: makeNodeComponent("heroWrapper"),
    heroInner: makeNodeComponent("heroInner"),
    heroContent: makeNodeComponent("heroContent"),
    kicker: makeNodeComponent("kicker"),
    h1: makeNodeComponent("h1"),
    pageContent: makeNodeComponent("pageContent"),
    h2: makeNodeComponent("h2"),

    // Metadata about props expected for PlasmicOurApproach
    internalVariantProps: PlasmicOurApproach__VariantProps,
    internalArgProps: PlasmicOurApproach__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Maerifa Solutions | High-Performance Server Technology on a Global Scale",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOurApproach;
/* prettier-ignore-end */
