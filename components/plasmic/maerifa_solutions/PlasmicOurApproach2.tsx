// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: 71kaamFMij4T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageWrapper from "../../PageWrapper"; // plasmic-import: LxnEHVEe-YQz/component
import { PlasmicHead } from "@plasmicapp/react-web";
import FramerMotion from "../../FramerMotion"; // plasmic-import: NKtmoaTySRQh/codeComponent
import Kicker from "../../Kicker"; // plasmic-import: sRJYTCOVASaN/component

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicOurApproach2.module.css"; // plasmic-import: 71kaamFMij4T/css

createPlasmicElementProxy;

export type PlasmicOurApproach2__VariantMembers = {};
export type PlasmicOurApproach2__VariantsArgs = {};
type VariantPropType = keyof PlasmicOurApproach2__VariantsArgs;
export const PlasmicOurApproach2__VariantProps = new Array<VariantPropType>();

export type PlasmicOurApproach2__ArgsType = {};
type ArgPropType = keyof PlasmicOurApproach2__ArgsType;
export const PlasmicOurApproach2__ArgProps = new Array<ArgPropType>();

export type PlasmicOurApproach2__OverridesType = {
  root?: Flex__<typeof PageWrapper>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  heroWrapper?: Flex__<"header">;
  heroInner?: Flex__<"div">;
  heroContent?: Flex__<"hgroup">;
  kicker?: Flex__<typeof Kicker>;
  pageContent?: Flex__<"section">;
};

export interface DefaultOurApproach2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOurApproach2__RenderFunc(props: {
  variants: PlasmicOurApproach2__VariantsArgs;
  args: PlasmicOurApproach2__ArgsType;
  overrides: PlasmicOurApproach2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "formSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicOurApproach2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicOurApproach2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicOurApproach2.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PageWrapper
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          bottomLineNavbar={(() => {
            try {
              return $ctx.isScrolled;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          children2={
            <div className={classNames(projectcss.all, sty.freeBox__rpt4)}>
              <PlasmicHead
                data-plasmic-name={"pageMetadataOverride"}
                data-plasmic-override={overrides.pageMetadataOverride}
                className={classNames(
                  "__wab_instance",
                  sty.pageMetadataOverride
                )}
                image={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "/plasmic/maerifa_solutions/images/asset28Png.png"
                    : "/plasmic/maerifa_solutions/images/asset28Png.png"
                }
                title={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Maerifa Solutions | High-Performance Server Technology on a Global Scale"
                    : ``
                }
              />

              <header
                data-plasmic-name={"heroWrapper"}
                data-plasmic-override={overrides.heroWrapper}
                className={classNames(projectcss.all, sty.heroWrapper)}
              >
                <div
                  data-plasmic-name={"heroInner"}
                  data-plasmic-override={overrides.heroInner}
                  className={classNames(projectcss.all, sty.heroInner)}
                >
                  <Stack__
                    as={"hgroup"}
                    data-plasmic-name={"heroContent"}
                    data-plasmic-override={overrides.heroContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.heroContent)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion___6El8I
                      )}
                      delay={0}
                    >
                      <Kicker
                        data-plasmic-name={"kicker"}
                        data-plasmic-override={overrides.kicker}
                        className={classNames("__wab_instance", sty.kicker)}
                        color={"dark"}
                        text={"Our Leadership"}
                      />
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7D5QA
                      )}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__pJtD
                        )}
                        delay={0.1}
                      >
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1___2Dwb8
                          )}
                        >
                          {"Impact"}
                        </h1>
                      </FramerMotion>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__lpKmD
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m4UFn
                          )}
                        >
                          {
                            "At Maerifa Solutions, we believe in empowering communities. As such, we have pledged to donate a portion of our net profits to organisations creating impact around the world."
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                </div>
              </header>
              <section
                data-plasmic-name={"pageContent"}
                data-plasmic-override={overrides.pageContent}
                className={classNames(projectcss.all, sty.pageContent)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___1G8V)}
                  id={"scroll"}
                >
                  <FramerMotion
                    className={classNames(
                      "__wab_instance",
                      sty.framerMotion__dwUoi
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lJsge)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__uqJo7)}
                        displayHeight={"auto"}
                        displayMaxHeight={"450px"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"450px"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/maerifa_solutions/images/whatsAppImage20240906At112414Jpeg.jpg",
                          fullWidth: 1600,
                          fullHeight: 1066,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bAkIu
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p6YDr
                        )}
                      />
                    </div>
                  </FramerMotion>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uQwDs)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__g2B5S)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hnqwH
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__kBicn
                          )}
                          delay={0.1}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3___5ZqX5
                            )}
                          >
                            {
                              "Tailored solutions for short and long-term success"
                            }
                          </h3>
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__k27Da
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iHeCb
                          )}
                        >
                          {
                            "Our technology consultancy team, seek to derive value for our customers by tailoring best-in-class solutions from leading technology vendors. The team focus on the required outcomes and objectives, both in the short and long-term, whilst maintaining attention on both investment and futureproofing"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__ijOr
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qeVa
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__pr1Im)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/whatsAppImage20240906At104548Jpeg.jpg",
                            fullWidth: 1080,
                            fullHeight: 720,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mqfcM
                          )}
                        />
                      </div>
                    </FramerMotion>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kXt1U)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__hUgP
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mgsEe
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__qZ4I)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/whatsAppImage20240906At104638Jpeg.jpg",
                            fullWidth: 1600,
                            fullHeight: 1063,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eAxzz
                          )}
                        />
                      </div>
                    </FramerMotion>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__b02Nm)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pgclq
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion___35Kl3
                          )}
                          delay={0.1}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__dYwSd
                            )}
                          >
                            {
                              "Tailored solutions for short and long-term success"
                            }
                          </h3>
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__wurO8
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hyplY
                          )}
                        >
                          {
                            "Our technology consultancy team, seek to derive value for our customers by tailoring best-in-class solutions from leading technology vendors. The team focus on the required outcomes and objectives, both in the short and long-term, whilst maintaining attention on both investment and futureproofing"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kev7H)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iNq71)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r4Sre
                        )}
                      >
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__wGaCy
                          )}
                          delay={0.1}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3___9Mvf
                            )}
                          >
                            {
                              "Tailored solutions for short and long-term success"
                            }
                          </h3>
                        </FramerMotion>
                      </Stack__>
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__ms7Rb
                        )}
                        delay={0.2}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___84NyH
                          )}
                        >
                          {
                            "Our technology consultancy team, seek to derive value for our customers by tailoring best-in-class solutions from leading technology vendors. The team focus on the required outcomes and objectives, both in the short and long-term, whilst maintaining attention on both investment and futureproofing"
                          }
                        </div>
                      </FramerMotion>
                    </Stack__>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__szced
                      )}
                      delay={0.3}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Ol0
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nKqr8)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/maerifa_solutions/images/shutterstock2485116241Jpg.jpg",
                            fullWidth: 4240,
                            fullHeight: 2832,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bDCh6
                          )}
                        />
                      </div>
                    </FramerMotion>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__leEfc)}
                  >
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__ycxIa
                      )}
                      delay={0.1}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__m3Gp5
                        )}
                      >
                        {"Our approach"}
                      </h1>
                    </FramerMotion>
                    <FramerMotion
                      className={classNames(
                        "__wab_instance",
                        sty.framerMotion__l4KXu
                      )}
                      delay={0.2}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eR5Fk
                        )}
                      >
                        {
                          "Since their inception in 2000, EMpower has awarded more than US$50 million in grants to nearly 400 organisations, and has directly impacted the lives of more than 1 million young people."
                        }
                      </div>
                    </FramerMotion>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j7Bd)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vau27)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__rQp3F
                        )}
                        delay={0.3}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ivLt3
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__chBrO)}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/maerifa_solutions/images/shutterstock2485116241Jpg.jpg",
                              fullWidth: 4240,
                              fullHeight: 2832,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xNA
                            )}
                          />
                        </div>
                      </FramerMotion>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sIHuV
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cEvIo
                          )}
                        >
                          <FramerMotion
                            className={classNames(
                              "__wab_instance",
                              sty.framerMotion__zd1Cr
                            )}
                            delay={0.1}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__x7R6B
                              )}
                            >
                              {
                                "Tailored solutions for short and long-term success"
                              }
                            </h3>
                          </FramerMotion>
                        </Stack__>
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__xmKEz
                          )}
                          delay={0.2}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bew9J
                            )}
                          >
                            {
                              "Our technology consultancy team, seek to derive value for our customers by tailoring best-in-class solutions from leading technology vendors. The team focus on the required outcomes and objectives, both in the short and long-term, whilst maintaining attention on both investment and futureproofing"
                            }
                          </div>
                        </FramerMotion>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__a3UfO)}
                    >
                      <FramerMotion
                        className={classNames(
                          "__wab_instance",
                          sty.framerMotion__jLCi3
                        )}
                        delay={0.3}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dTjPr
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__rbC4T)}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/maerifa_solutions/images/shutterstock2485116241Jpg.jpg",
                              fullWidth: 4240,
                              fullHeight: 2832,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xkiTb
                            )}
                          />
                        </div>
                      </FramerMotion>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tuSif
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oUt1O
                          )}
                        >
                          <FramerMotion
                            className={classNames(
                              "__wab_instance",
                              sty.framerMotion___4T6P
                            )}
                            delay={0.1}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__lmZp0
                              )}
                            >
                              {
                                "Tailored solutions for short and long-term success"
                              }
                            </h3>
                          </FramerMotion>
                        </Stack__>
                        <FramerMotion
                          className={classNames(
                            "__wab_instance",
                            sty.framerMotion__vpEv7
                          )}
                          delay={0.2}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tbz9N
                            )}
                          >
                            {
                              "Our technology consultancy team, seek to derive value for our customers by tailoring best-in-class solutions from leading technology vendors. The team focus on the required outcomes and objectives, both in the short and long-term, whilst maintaining attention on both investment and futureproofing"
                            }
                          </div>
                        </FramerMotion>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </section>
            </div>
          }
          className={classNames("__wab_instance", sty.root)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "heroWrapper",
    "heroInner",
    "heroContent",
    "kicker",
    "pageContent"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  heroWrapper: ["heroWrapper", "heroInner", "heroContent", "kicker"],
  heroInner: ["heroInner", "heroContent", "kicker"],
  heroContent: ["heroContent", "kicker"],
  kicker: ["kicker"],
  pageContent: ["pageContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof PageWrapper;
  pageMetadataOverride: typeof PlasmicHead;
  heroWrapper: "header";
  heroInner: "div";
  heroContent: "hgroup";
  kicker: typeof Kicker;
  pageContent: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOurApproach2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOurApproach2__VariantsArgs;
    args?: PlasmicOurApproach2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOurApproach2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOurApproach2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOurApproach2__ArgProps,
          internalVariantPropNames: PlasmicOurApproach2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOurApproach2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOurApproach2";
  } else {
    func.displayName = `PlasmicOurApproach2.${nodeName}`;
  }
  return func;
}

export const PlasmicOurApproach2 = Object.assign(
  // Top-level PlasmicOurApproach2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    heroWrapper: makeNodeComponent("heroWrapper"),
    heroInner: makeNodeComponent("heroInner"),
    heroContent: makeNodeComponent("heroContent"),
    kicker: makeNodeComponent("kicker"),
    pageContent: makeNodeComponent("pageContent"),

    // Metadata about props expected for PlasmicOurApproach2
    internalVariantProps: PlasmicOurApproach2__VariantProps,
    internalArgProps: PlasmicOurApproach2__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Maerifa Solutions | High-Performance Server Technology on a Global Scale",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOurApproach2;
/* prettier-ignore-end */
