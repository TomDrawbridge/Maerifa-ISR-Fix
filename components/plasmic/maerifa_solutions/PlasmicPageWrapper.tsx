// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: LxnEHVEe-YQz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: sMFUSm4Rse1n/component
import CustomMarquee from "../../Marquee"; // plasmic-import: EwWPCuuwZNRc/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "./plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicPageWrapper.module.css"; // plasmic-import: LxnEHVEe-YQz/css

import VectorSvg2Icon from "./icons/PlasmicIcon__VectorSvg2"; // plasmic-import: 8MlxkksRXspQ/icon
import Asset2SvgIcon from "./icons/PlasmicIcon__Asset2Svg"; // plasmic-import: s9woIgVEefpx/icon
import ForWhiteBackgroundSvgIcon from "./icons/PlasmicIcon__ForWhiteBackgroundSvg"; // plasmic-import: bQrEUghiiNPA/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: F1Y7pJ1DUm9w/icon
import Asset1Svg2Icon from "./icons/PlasmicIcon__Asset1Svg2"; // plasmic-import: _M8_nAKAhFbl/icon

createPlasmicElementProxy;

export type PlasmicPageWrapper__VariantMembers = {
  light: "light";
};
export type PlasmicPageWrapper__VariantsArgs = {
  light?: SingleBooleanChoiceArg<"light">;
};
type VariantPropType = keyof PlasmicPageWrapper__VariantsArgs;
export const PlasmicPageWrapper__VariantProps = new Array<VariantPropType>(
  "light"
);

export type PlasmicPageWrapper__ArgsType = {
  children2?: React.ReactNode;
  bottomLineNavbar?: boolean;
};
type ArgPropType = keyof PlasmicPageWrapper__ArgsType;
export const PlasmicPageWrapper__ArgProps = new Array<ArgPropType>(
  "children2",
  "bottomLineNavbar"
);

export type PlasmicPageWrapper__OverridesType = {
  page?: Flex__<"section">;
  navbar?: Flex__<typeof Navbar>;
  footer?: Flex__<"footer">;
  radialBg2?: Flex__<"div">;
  customMarquee?: Flex__<typeof CustomMarquee>;
  mobileMarquee?: Flex__<typeof CustomMarquee>;
  mobileMarquee2?: Flex__<typeof CustomMarquee>;
  innerContent?: Flex__<"span">;
};

export interface DefaultPageWrapperProps {
  children2?: React.ReactNode;
  bottomLineNavbar?: boolean;
  light?: SingleBooleanChoiceArg<"light">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageWrapper__RenderFunc(props: {
  variants: PlasmicPageWrapper__VariantsArgs;
  args: PlasmicPageWrapper__ArgsType;
  overrides: PlasmicPageWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          bottomLineNavbar: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "navbar.dropdownVisible",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "light",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.light
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    footer: usePlasmicDataOp(() => {
      return {
        sourceId: "aMgmeTWQBv5yDEivoQ6vB4",
        opId: "510198fd-6562-48e1-9189-df86e2b4ae71",
        userArgs: {},
        cacheKey: `plasmic.$.510198fd-6562-48e1-9189-df86e2b4ae71.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <section
      data-plasmic-name={"page"}
      data-plasmic-override={overrides.page}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.page,
        "light-mode",
        { [sty.pagelight]: hasVariant($state, "light", "light") }
      )}
    >
      <Navbar
        data-plasmic-name={"navbar"}
        data-plasmic-override={overrides.navbar}
        bottomLine={(() => {
          try {
            return $props.bottomLineNavbar;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.navbar, {
          [sty.navbarlight]: hasVariant($state, "light", "light")
        })}
        colorMode={true}
        onDropdownVisibleChange={generateStateOnChangeProp($state, [
          "navbar",
          "dropdownVisible"
        ])}
      />

      {renderPlasmicSlot({
        defaultContents: null,
        value: args.children2
      })}
      <footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer)}
      >
        <div
          data-plasmic-name={"radialBg2"}
          data-plasmic-override={overrides.radialBg2}
          className={classNames(projectcss.all, sty.radialBg2)}
        />

        <VectorSvg2Icon
          className={classNames(projectcss.all, sty.svg___3Btxx)}
          role={"img"}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nRRf, {
            [sty.freeBoxlight__nRRfUrE0O]: hasVariant($state, "light", "light")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__bUoQk)}>
            <Asset2SvgIcon
              className={classNames(projectcss.all, sty.svg__adeM9, {
                [sty.svglight__adeM9UrE0O]: hasVariant($state, "light", "light")
              })}
              role={"img"}
            />
          </div>
          <CustomMarquee
            data-plasmic-name={"customMarquee"}
            data-plasmic-override={overrides.customMarquee}
            autoFill={false}
            className={classNames("__wab_instance", sty.customMarquee)}
            direction={"left"}
            gradient={true}
            gradientColor={"#E8F4FF"}
            gradientWidth={80}
            pauseOnHover={true}
            play={true}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7F52D)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.footer.data.response.data.partner_logos;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__temBu,
                      (() => {
                        try {
                          return "logoexpand-" + currentItem.expand_logo;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      {
                        [sty.linklight__temBuUrE0O]: hasVariant(
                          $state,
                          "light",
                          "light"
                        )
                      }
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return currentItem.website_url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__chJb5)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={(() => {
                        try {
                          return (
                            "https://content.maerifasolutions.com/assets/" +
                            currentItem.logo_light.id
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "https://static1.plasmic.app/components/react-slick/slide1.png";
                          }
                          throw e;
                        }
                      })()}
                    />
                  </PlasmicLink__>
                );
              })}
            </Stack__>
          </CustomMarquee>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <CustomMarquee
              data-plasmic-name={"mobileMarquee"}
              data-plasmic-override={overrides.mobileMarquee}
              autoFill={false}
              className={classNames("__wab_instance", sty.mobileMarquee)}
              direction={"left"}
              gradient={true}
              gradientColor={"#E8F4FF"}
              gradientWidth={80}
              pauseOnHover={true}
              play={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__crJss)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        const firstHalf =
                          $queries.footer.data.response.data.partner_logos.slice(
                            0,
                            Math.ceil(
                              $queries.footer.data.response.data.partner_logos
                                .length / 2
                            )
                          );
                        return firstHalf;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__ffa5D,
                        (() => {
                          try {
                            return "logoexpand-" + currentItem.expand_logo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        {
                          [sty.linklight__ffa5DUrE0O]: hasVariant(
                            $state,
                            "light",
                            "light"
                          )
                        }
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return currentItem.website_url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__y4Gsi)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={(() => {
                          try {
                            return (
                              "https://content.maerifasolutions.com/assets/" +
                              currentItem.logo_light.id
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://static1.plasmic.app/components/react-slick/slide1.png";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </PlasmicLink__>
                  );
                })}
              </Stack__>
            </CustomMarquee>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <CustomMarquee
              data-plasmic-name={"mobileMarquee2"}
              data-plasmic-override={overrides.mobileMarquee2}
              autoFill={false}
              className={classNames("__wab_instance", sty.mobileMarquee2)}
              direction={"right"}
              gradient={true}
              gradientColor={"#E8F4FF"}
              gradientWidth={80}
              pauseOnHover={true}
              play={true}
              speed={20}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9PwAa)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        const secondHalf =
                          $queries.footer.data.response.data.partner_logos.slice(
                            Math.ceil(
                              $queries.footer.data.response.data.partner_logos
                                .length / 2
                            )
                          );
                        return secondHalf;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__mvC9,
                        (() => {
                          try {
                            return "logoexpand-" + currentItem.expand_logo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        {
                          [sty.linklight__mvC9UrE0O]: hasVariant(
                            $state,
                            "light",
                            "light"
                          )
                        }
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return currentItem.website_url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___4WCJl)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "100%"
                            : "100%"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={(() => {
                          try {
                            return (
                              "https://content.maerifasolutions.com/assets/" +
                              currentItem.logo_light.id
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://static1.plasmic.app/components/react-slick/slide1.png";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </PlasmicLink__>
                  );
                })}
              </Stack__>
            </CustomMarquee>
          ) : null}
        </Stack__>
        <Stack__
          as={"span"}
          data-plasmic-name={"innerContent"}
          data-plasmic-override={overrides.innerContent}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.span,
            sty.innerContent
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oCch1)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pkrWa
              )}
            >
              {"Products"}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.footer.data.response.data.product_category;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__a91QM
                  )}
                  component={Link}
                  href={`/products`}
                  key={currentIndex}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Hardware";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </PlasmicLink__>
              );
            })}
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bgm32)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pnmSq
              )}
            >
              {"About Maerifa"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Hfr
              )}
            >
              {"Our Team"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nou8B
              )}
            >
              {"Mission"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rGuiU
              )}
            >
              {"Vision"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wLrqW
              )}
            >
              {"Our Story"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__p5BB)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rpnM6
              )}
            >
              {"Locations"}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.footer.data.response.data.locations;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jPE4
                  )}
                  component={Link}
                  href={`/locations`}
                  key={currentIndex}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.address.city;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Abu Dhabi";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </PlasmicLink__>
              );
            })}
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bW9Pi)}
          >
            <ForWhiteBackgroundSvgIcon
              className={classNames(projectcss.all, sty.svg__n7B59, {
                [sty.svglight__n7B59UrE0O]: hasVariant($state, "light", "light")
              })}
              role={"img"}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fZi9F)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kdWnK)}
              >
                <Icon23Icon
                  className={classNames(projectcss.all, sty.svg__t0NQ)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
          <Asset1Svg2Icon
            className={classNames(projectcss.all, sty.svg__gcj3A)}
            role={"img"}
          />
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__mnMvh)} />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__amKNg)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yenmv
            )}
          >
            {"\u00a9 Maerifa Solutions Ltd 2024"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2Y70Q)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gYr0S
              )}
              component={Link}
              href={`/policies/privacy`}
              platform={"nextjs"}
            >
              {"Privacy Policy"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__q0ENz
              )}
              component={Link}
              href={`/policies/terms-and-conditions`}
              platform={"nextjs"}
            >
              {"Terms & Conditions"}
            </PlasmicLink__>
          </Stack__>
        </Stack__>
      </footer>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  page: [
    "page",
    "navbar",
    "footer",
    "radialBg2",
    "customMarquee",
    "mobileMarquee",
    "mobileMarquee2",
    "innerContent"
  ],
  navbar: ["navbar"],
  footer: [
    "footer",
    "radialBg2",
    "customMarquee",
    "mobileMarquee",
    "mobileMarquee2",
    "innerContent"
  ],
  radialBg2: ["radialBg2"],
  customMarquee: ["customMarquee"],
  mobileMarquee: ["mobileMarquee"],
  mobileMarquee2: ["mobileMarquee2"],
  innerContent: ["innerContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  page: "section";
  navbar: typeof Navbar;
  footer: "footer";
  radialBg2: "div";
  customMarquee: typeof CustomMarquee;
  mobileMarquee: typeof CustomMarquee;
  mobileMarquee2: typeof CustomMarquee;
  innerContent: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageWrapper__VariantsArgs;
    args?: PlasmicPageWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPageWrapper__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageWrapper__ArgProps,
          internalVariantPropNames: PlasmicPageWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "page") {
    func.displayName = "PlasmicPageWrapper";
  } else {
    func.displayName = `PlasmicPageWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicPageWrapper = Object.assign(
  // Top-level PlasmicPageWrapper renders the root element
  makeNodeComponent("page"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    footer: makeNodeComponent("footer"),
    radialBg2: makeNodeComponent("radialBg2"),
    customMarquee: makeNodeComponent("customMarquee"),
    mobileMarquee: makeNodeComponent("mobileMarquee"),
    mobileMarquee2: makeNodeComponent("mobileMarquee2"),
    innerContent: makeNodeComponent("innerContent"),

    // Metadata about props expected for PlasmicPageWrapper
    internalVariantProps: PlasmicPageWrapper__VariantProps,
    internalArgProps: PlasmicPageWrapper__ArgProps
  }
);

export default PlasmicPageWrapper;
/* prettier-ignore-end */
