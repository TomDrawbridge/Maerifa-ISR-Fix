// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: umqBp7PH6EsELMxj7VcR5D
// Component: 9kMbghGPkPE0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import ReadMoreButton from "../../ReadMoreButton"; // plasmic-import: zIbTrUHHii3n/component

import { useScreenVariants as useScreenVariantsjnoQdQuyEw7D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JnoQdQUYEw7d/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "./plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: umqBp7PH6EsELMxj7VcR5D/projectcss
import sty from "./PlasmicTeamCard.module.css"; // plasmic-import: 9kMbghGPkPE0/css

createPlasmicElementProxy;

export type PlasmicTeamCard__VariantMembers = {
  type: "globe" | "noImage" | "midWidth" | "vertical" | "noHoverButton";
  color: "white";
  noImageTypes: "smallText" | "slot";
};
export type PlasmicTeamCard__VariantsArgs = {
  type?: SingleChoiceArg<
    "globe" | "noImage" | "midWidth" | "vertical" | "noHoverButton"
  >;
  color?: SingleChoiceArg<"white">;
  noImageTypes?: SingleChoiceArg<"smallText" | "slot">;
};
type VariantPropType = keyof PlasmicTeamCard__VariantsArgs;
export const PlasmicTeamCard__VariantProps = new Array<VariantPropType>(
  "type",
  "color",
  "noImageTypes"
);

export type PlasmicTeamCard__ArgsType = {
  header?: string;
  title?: string;
  onClick?: (event: any) => void;
  image?: React.ComponentProps<typeof PlasmicImg__>["src"];
  destination2?: string;
  shortBio?: string;
  longBio?: string;
};
type ArgPropType = keyof PlasmicTeamCard__ArgsType;
export const PlasmicTeamCard__ArgProps = new Array<ArgPropType>(
  "header",
  "title",
  "onClick",
  "image",
  "destination2",
  "shortBio",
  "longBio"
);

export type PlasmicTeamCard__OverridesType = {
  bentoBox?: Flex__<"div">;
  hoverContent?: Flex__<"div">;
  textContent2?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  textContent3?: Flex__<"div">;
  readMoreButton?: Flex__<typeof ReadMoreButton>;
  img?: Flex__<typeof PlasmicImg__>;
  textContent?: Flex__<"div">;
};

export interface DefaultTeamCardProps {
  header?: string;
  title?: string;
  onClick?: (event: any) => void;
  image?: React.ComponentProps<typeof PlasmicImg__>["src"];
  destination2?: string;
  shortBio?: string;
  longBio?: string;
  type?: SingleChoiceArg<
    "globe" | "noImage" | "midWidth" | "vertical" | "noHoverButton"
  >;
  color?: SingleChoiceArg<"white">;
  noImageTypes?: SingleChoiceArg<"smallText" | "slot">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeamCard__RenderFunc(props: {
  variants: PlasmicTeamCard__VariantsArgs;
  args: PlasmicTeamCard__ArgsType;
  overrides: PlasmicTeamCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: "Header Text",
          title: "Founder & CEO",
          image: {
            src: "/plasmic/maerifa_solutions/images/image2.png",
            fullWidth: 1365,
            fullHeight: 2048,
            aspectRatio: undefined
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "noImageTypes",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noImageTypes
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          triggers.hover_bentoBox ? false : false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isBentoBoxHover, triggerBentoBoxHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_bentoBox: isBentoBoxHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjnoQdQuyEw7D()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"bentoBox"}
      data-plasmic-override={overrides.bentoBox}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.bentoBox,
        {
          [sty.bentoBoxcolor_white]: hasVariant($state, "color", "white"),
          [sty.bentoBoxcolor_white_type_vertical]:
            hasVariant($state, "type", "vertical") &&
            hasVariant($state, "color", "white"),
          [sty.bentoBoxnoImageTypes_slot]: hasVariant(
            $state,
            "noImageTypes",
            "slot"
          ),
          [sty.bentoBoxnoImageTypes_smallText]: hasVariant(
            $state,
            "noImageTypes",
            "smallText"
          ),
          [sty.bentoBoxtype_globe]: hasVariant($state, "type", "globe"),
          [sty.bentoBoxtype_midWidth]: hasVariant($state, "type", "midWidth"),
          [sty.bentoBoxtype_midWidth_color_white]:
            hasVariant($state, "type", "midWidth") &&
            hasVariant($state, "color", "white"),
          [sty.bentoBoxtype_noHoverButton]: hasVariant(
            $state,
            "type",
            "noHoverButton"
          ),
          [sty.bentoBoxtype_noImage]: hasVariant($state, "type", "noImage"),
          [sty.bentoBoxtype_vertical]: hasVariant($state, "type", "vertical")
        }
      )}
      data-plasmic-trigger-props={[triggerBentoBoxHoverProps]}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__x2EnD, {
          [sty.freeBoxcolor_white__x2EnDgo1H]: hasVariant(
            $state,
            "color",
            "white"
          ),
          [sty.freeBoxnoImageTypes_slot__x2EnDzq0XO]: hasVariant(
            $state,
            "noImageTypes",
            "slot"
          ),
          [sty.freeBoxnoImageTypes_smallText__x2EnDCl8Ni]: hasVariant(
            $state,
            "noImageTypes",
            "smallText"
          ),
          [sty.freeBoxtype_noImage__x2EnDgQda3]: hasVariant(
            $state,
            "type",
            "noImage"
          ),
          [sty.freeBoxtype_vertical__x2EnDhkFer]: hasVariant(
            $state,
            "type",
            "vertical"
          )
        })}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__tvJwE, {
          [sty.freeBoxnoImageTypes_slot__tvJwEzq0XO]: hasVariant(
            $state,
            "noImageTypes",
            "slot"
          ),
          [sty.freeBoxnoImageTypes_smallText__tvJwECl8Ni]: hasVariant(
            $state,
            "noImageTypes",
            "smallText"
          ),
          [sty.freeBoxtype_globe__tvJwE4P7V5]: hasVariant(
            $state,
            "type",
            "globe"
          ),
          [sty.freeBoxtype_noHoverButton__tvJwE0P8V]: hasVariant(
            $state,
            "type",
            "noHoverButton"
          ),
          [sty.freeBoxtype_noImage__tvJwEgQda3]: hasVariant(
            $state,
            "type",
            "noImage"
          ),
          [sty.freeBoxtype_vertical__tvJwEhkFer]: hasVariant(
            $state,
            "type",
            "vertical"
          )
        })}
      >
        <div
          data-plasmic-name={"hoverContent"}
          data-plasmic-override={overrides.hoverContent}
          className={classNames(projectcss.all, sty.hoverContent, {
            [sty.hoverContentnoImageTypes_slot]: hasVariant(
              $state,
              "noImageTypes",
              "slot"
            ),
            [sty.hoverContentnoImageTypes_smallText]: hasVariant(
              $state,
              "noImageTypes",
              "smallText"
            ),
            [sty.hoverContenttype_globe]: hasVariant($state, "type", "globe"),
            [sty.hoverContenttype_noHoverButton]: hasVariant(
              $state,
              "type",
              "noHoverButton"
            ),
            [sty.hoverContenttype_noImage]: hasVariant(
              $state,
              "type",
              "noImage"
            ),
            [sty.hoverContenttype_vertical]: hasVariant(
              $state,
              "type",
              "vertical"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"textContent2"}
            data-plasmic-override={overrides.textContent2}
            hasGap={true}
            className={classNames(projectcss.all, sty.textContent2, {
              [sty.textContent2noImageTypes_slot]: hasVariant(
                $state,
                "noImageTypes",
                "slot"
              ),
              [sty.textContent2noImageTypes_smallText]: hasVariant(
                $state,
                "noImageTypes",
                "smallText"
              ),
              [sty.textContent2type_globe]: hasVariant($state, "type", "globe"),
              [sty.textContent2type_noHoverButton]: hasVariant(
                $state,
                "type",
                "noHoverButton"
              ),
              [sty.textContent2type_noImage]: hasVariant(
                $state,
                "type",
                "noImage"
              ),
              [sty.textContent2type_vertical]: hasVariant(
                $state,
                "type",
                "vertical"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tMl8O,
                {
                  [sty.textcolor_white__tMl8Ogo1H]: hasVariant(
                    $state,
                    "color",
                    "white"
                  )
                }
              )}
            >
              {triggers.hover_bentoBox ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.shortBio;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.shortBio;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              closeButtonClassName={classNames({
                [sty["pcls_tNYIkCGdY9fa"]]: true
              })}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens
              )}
              footer={
                <div
                  className={classNames(projectcss.all, sty.freeBox__y5Wan)}
                />
              }
              hideFooter={true}
              maskClosable={true}
              modalContentClassName={classNames({
                [sty["pcls_QiLDBOMN_UQq"]]: true
              })}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textContent3"}
                  data-plasmic-override={overrides.textContent3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.textContent3, {
                    [sty.textContent3noImageTypes_slot]: hasVariant(
                      $state,
                      "noImageTypes",
                      "slot"
                    ),
                    [sty.textContent3noImageTypes_smallText]: hasVariant(
                      $state,
                      "noImageTypes",
                      "smallText"
                    ),
                    [sty.textContent3type_globe]: hasVariant(
                      $state,
                      "type",
                      "globe"
                    ),
                    [sty.textContent3type_noHoverButton]: hasVariant(
                      $state,
                      "type",
                      "noHoverButton"
                    ),
                    [sty.textContent3type_noImage]: hasVariant(
                      $state,
                      "type",
                      "noImage"
                    ),
                    [sty.textContent3type_vertical]: hasVariant(
                      $state,
                      "type",
                      "vertical"
                    )
                  })}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__lxIrw,
                      {
                        [sty.h4color_white__lxIrwGo1H]: hasVariant(
                          $state,
                          "color",
                          "white"
                        ),
                        [sty.h4noImageTypes_slot__lxIrwzq0XO]: hasVariant(
                          $state,
                          "noImageTypes",
                          "slot"
                        ),
                        [sty.h4noImageTypes_smallText__lxIrwCl8Ni]: hasVariant(
                          $state,
                          "noImageTypes",
                          "smallText"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.header;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Section Title";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4CPW,
                      {
                        [sty.textcolor_white___4CPWgo1H]: hasVariant(
                          $state,
                          "color",
                          "white"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do. Ipsum dolor.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              }
              trigger={
                <ReadMoreButton
                  data-plasmic-name={"readMoreButton"}
                  data-plasmic-override={overrides.readMoreButton}
                  className={classNames("__wab_instance", sty.readMoreButton, {
                    [sty.readMoreButtontype_noHoverButton]: hasVariant(
                      $state,
                      "type",
                      "noHoverButton"
                    )
                  })}
                  white={true}
                  whiteOnWhite={triggers.hover_bentoBox ? true : undefined}
                />
              }
              width={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "95%"
                  : "700px"
              }
              wrapClassName={classNames({ [sty["pcls_1pnSarMPJb4g"]]: true })}
            >
              <div className={classNames(projectcss.all, sty.freeBox___6Rwfj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kuhKx
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return $props.longBio.replace(
                            /<\/p>/g,
                            "</p><br><br><p>"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
              </div>
            </AntdModal>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__lGpal)}>
          <div className={classNames(projectcss.all, sty.freeBox__ycag3)} />

          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"eager"}
            src={args.image}
          />

          <div className={classNames(projectcss.all, sty.freeBox___6SY83)} />

          <div className={classNames(projectcss.all, sty.freeBox__nvhhc)} />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"textContent"}
          data-plasmic-override={overrides.textContent}
          hasGap={true}
          className={classNames(projectcss.all, sty.textContent, {
            [sty.textContentnoImageTypes_slot]: hasVariant(
              $state,
              "noImageTypes",
              "slot"
            ),
            [sty.textContentnoImageTypes_smallText]: hasVariant(
              $state,
              "noImageTypes",
              "smallText"
            ),
            [sty.textContenttype_globe]: hasVariant($state, "type", "globe"),
            [sty.textContenttype_noHoverButton]: hasVariant(
              $state,
              "type",
              "noHoverButton"
            ),
            [sty.textContenttype_noImage]: hasVariant(
              $state,
              "type",
              "noImage"
            ),
            [sty.textContenttype_vertical]: hasVariant(
              $state,
              "type",
              "vertical"
            )
          })}
        >
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__egghr,
              {
                [sty.h4color_white__egghrGo1H]: hasVariant(
                  $state,
                  "color",
                  "white"
                ),
                [sty.h4noImageTypes_slot__egghrzq0XO]: hasVariant(
                  $state,
                  "noImageTypes",
                  "slot"
                ),
                [sty.h4noImageTypes_smallText__egghrCl8Ni]: hasVariant(
                  $state,
                  "noImageTypes",
                  "smallText"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.header;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Section Title";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h4>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__doqh5,
              {
                [sty.textcolor_white__doqh5Go1H]: hasVariant(
                  $state,
                  "color",
                  "white"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do. Ipsum dolor.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  bentoBox: [
    "bentoBox",
    "hoverContent",
    "textContent2",
    "modal",
    "textContent3",
    "readMoreButton",
    "img",
    "textContent"
  ],
  hoverContent: [
    "hoverContent",
    "textContent2",
    "modal",
    "textContent3",
    "readMoreButton"
  ],
  textContent2: ["textContent2", "modal", "textContent3", "readMoreButton"],
  modal: ["modal", "textContent3", "readMoreButton"],
  textContent3: ["textContent3"],
  readMoreButton: ["readMoreButton"],
  img: ["img"],
  textContent: ["textContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  bentoBox: "div";
  hoverContent: "div";
  textContent2: "div";
  modal: typeof AntdModal;
  textContent3: "div";
  readMoreButton: typeof ReadMoreButton;
  img: typeof PlasmicImg__;
  textContent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamCard__VariantsArgs;
    args?: PlasmicTeamCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeamCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeamCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeamCard__ArgProps,
          internalVariantPropNames: PlasmicTeamCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTeamCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "bentoBox") {
    func.displayName = "PlasmicTeamCard";
  } else {
    func.displayName = `PlasmicTeamCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamCard = Object.assign(
  // Top-level PlasmicTeamCard renders the root element
  makeNodeComponent("bentoBox"),
  {
    // Helper components rendering sub-elements
    hoverContent: makeNodeComponent("hoverContent"),
    textContent2: makeNodeComponent("textContent2"),
    modal: makeNodeComponent("modal"),
    textContent3: makeNodeComponent("textContent3"),
    readMoreButton: makeNodeComponent("readMoreButton"),
    img: makeNodeComponent("img"),
    textContent: makeNodeComponent("textContent"),

    // Metadata about props expected for PlasmicTeamCard
    internalVariantProps: PlasmicTeamCard__VariantProps,
    internalArgProps: PlasmicTeamCard__ArgProps
  }
);

export default PlasmicTeamCard;
/* prettier-ignore-end */
